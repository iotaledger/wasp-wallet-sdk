{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AccountAddress": {
      "additionalProperties": false,
      "description": "An Address of the Account",
      "properties": {
        "address": {
          "type": "string"
        },
        "internal": {
          "type": "boolean"
        },
        "keyIndex": {
          "type": "number"
        },
        "used": {
          "type": "boolean"
        }
      },
      "required": [
        "address",
        "keyIndex",
        "internal",
        "used"
      ],
      "type": "object"
    },
    "AccountId": {
      "description": "Account identifier Could be the account index (number) or account alias (string)",
      "type": [
        "number",
        "string"
      ]
    },
    "AccountMeta": {
      "additionalProperties": false,
      "description": "The account object",
      "properties": {
        "addressesWithUnspentOutputs": {
          "items": {
            "$ref": "#/definitions/AddressWithUnspentOutputs"
          },
          "type": "array"
        },
        "alias": {
          "type": "string"
        },
        "coinType": {
          "$ref": "#/definitions/CoinType"
        },
        "incomingTransactions": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/Transaction"
            },
            "maxItems": 1,
            "minItems": 1,
            "type": "array"
          },
          "description": "Incoming transactions with their inputs if available and not already pruned",
          "type": "object"
        },
        "index": {
          "type": "number"
        },
        "internalAddresses": {
          "items": {
            "$ref": "#/definitions/AccountAddress"
          },
          "type": "array"
        },
        "lockedOutputs": {
          "additionalProperties": false,
          "description": "Output IDs of unspent outputs that are currently used as input for transactions",
          "properties": {
            "size": {
              "type": "number"
            }
          },
          "required": [
            "size"
          ],
          "type": "object"
        },
        "outputs": {
          "additionalProperties": {
            "$ref": "#/definitions/OutputData"
          },
          "type": "object"
        },
        "pendingTransactions": {
          "additionalProperties": false,
          "description": "Transaction IDs of pending transactions",
          "properties": {
            "size": {
              "type": "number"
            }
          },
          "required": [
            "size"
          ],
          "type": "object"
        },
        "publicAddresses": {
          "items": {
            "$ref": "#/definitions/AccountAddress"
          },
          "type": "array"
        },
        "transactions": {
          "additionalProperties": {
            "$ref": "#/definitions/Transaction"
          },
          "type": "object"
        },
        "unspentOutputs": {
          "additionalProperties": {
            "$ref": "#/definitions/OutputData"
          },
          "type": "object"
        }
      },
      "required": [
        "index",
        "coinType",
        "alias",
        "publicAddresses",
        "internalAddresses",
        "addressesWithUnspentOutputs",
        "outputs",
        "lockedOutputs",
        "unspentOutputs",
        "transactions",
        "pendingTransactions",
        "incomingTransactions"
      ],
      "type": "object"
    },
    "AccountMetadata": {
      "additionalProperties": false,
      "description": "The account metadata",
      "properties": {
        "alias": {
          "description": "The account alias",
          "type": "string"
        },
        "coinType": {
          "$ref": "#/definitions/CoinType",
          "description": "The used coin type"
        },
        "index": {
          "description": "The account index which will be used in the BIP32 path",
          "type": "number"
        }
      },
      "required": [
        "alias",
        "coinType",
        "index"
      ],
      "type": "object"
    },
    "AccountSyncOptions": {
      "additionalProperties": false,
      "description": "Specifies what outputs should be synced for the ed25519 addresses from the account.",
      "properties": {
        "aliasOutputs": {
          "type": "boolean"
        },
        "basicOutputs": {
          "type": "boolean"
        },
        "nftOutputs": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "AddressWithUnspentOutputs": {
      "additionalProperties": false,
      "description": "Address with unspent outputs",
      "properties": {
        "address": {
          "type": "string"
        },
        "internal": {
          "type": "boolean"
        },
        "keyIndex": {
          "type": "number"
        },
        "outputIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "address",
        "keyIndex",
        "internal",
        "outputIds"
      ],
      "type": "object"
    },
    "AliasOutputBuilderParams": {
      "additionalProperties": false,
      "description": "Options for building an Alias Output",
      "properties": {
        "aliasId": {
          "$ref": "#/definitions/HexEncodedString"
        },
        "amount": {
          "description": "If not provided, minimum storage deposit will be used",
          "type": "string"
        },
        "features": {
          "description": "Features to be contained by the output.",
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "foundryCounter": {
          "type": "number"
        },
        "immutableFeatures": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "nativeTokens": {
          "description": "The native tokens to be held by the output.",
          "items": {
            "$ref": "#/definitions/INativeToken"
          },
          "type": "array"
        },
        "stateIndex": {
          "type": "number"
        },
        "stateMetadata": {
          "$ref": "#/definitions/HexEncodedString"
        },
        "unlockConditions": {
          "description": "The unlock conditions for the output.",
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "aliasId",
        "unlockConditions"
      ],
      "type": "object"
    },
    "AliasOutputParams": {
      "additionalProperties": false,
      "description": "Options for the alias output creation",
      "properties": {
        "address": {
          "description": "Bech32 encoded address to which the Nft will be minted. Default will use the first address of the account",
          "type": "string"
        },
        "immutableMetadata": {
          "description": "Hex encoded bytes",
          "type": "string"
        },
        "metadata": {
          "description": "Hex encoded bytes",
          "type": "string"
        },
        "stateMetadata": {
          "description": "Hex encoded bytes",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AliasQueryParameter": {
      "anyOf": [
        {
          "additionalProperties": false,
          "description": "Filter outputs based on bech32-encoded state controller address.",
          "properties": {
            "stateController": {
              "type": "string"
            }
          },
          "required": [
            "stateController"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter outputs based on bech32-encoded governor (governance controller) address.",
          "properties": {
            "governor": {
              "type": "string"
            }
          },
          "required": [
            "governor"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter for a certain issuer",
          "properties": {
            "issuer": {
              "type": "string"
            }
          },
          "required": [
            "issuer"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter for a certain sender",
          "properties": {
            "sender": {
              "type": "string"
            }
          },
          "required": [
            "sender"
          ],
          "type": "object"
        },
        {
          "anyOf": [
            {
              "additionalProperties": false,
              "description": "Filters outputs based on the presence of native tokens.",
              "properties": {
                "hasNativeTokens": {
                  "type": "boolean"
                }
              },
              "required": [
                "hasNativeTokens"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Filters outputs that have at least a certain number of distinct native tokens.",
              "properties": {
                "minNativeTokenCount": {
                  "type": "number"
                }
              },
              "required": [
                "minNativeTokenCount"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Filters outputs that have at most a certain number of distinct native tokens.",
              "properties": {
                "maxNativeTokenCount": {
                  "type": "number"
                }
              },
              "required": [
                "maxNativeTokenCount"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Return outputs that were created after a certain Unix timestamp.",
              "properties": {
                "createdAfter": {
                  "type": "number"
                }
              },
              "required": [
                "createdAfter"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Return outputs that were created before a certain Unix timestamp.",
              "properties": {
                "createdBefore": {
                  "type": "number"
                }
              },
              "required": [
                "createdBefore"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Define the page size for the results",
              "properties": {
                "pageSize": {
                  "type": "number"
                }
              },
              "required": [
                "pageSize"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Pass the cursor(confirmationMS+outputId.pageSize) to start the results from",
              "properties": {
                "cursor": {
                  "type": "string"
                }
              },
              "required": [
                "cursor"
              ],
              "type": "object"
            }
          ],
          "description": "Shared query parameters"
        }
      ],
      "description": "Query parameters for filtering Alias Outputs"
    },
    "AliasSyncOptions": {
      "additionalProperties": false,
      "description": "Specifies what outputs should be synced for the address of an alias output.",
      "properties": {
        "aliasOutputs": {
          "type": "boolean"
        },
        "basicOutputs": {
          "type": "boolean"
        },
        "foundryOutputs": {
          "type": "boolean"
        },
        "nftOutputs": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Answer": {
      "additionalProperties": false,
      "properties": {
        "additionalInfo": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      },
      "required": [
        "value",
        "text",
        "additionalInfo"
      ],
      "type": "object"
    },
    "AnswerStatus": {
      "additionalProperties": false,
      "properties": {
        "accumulated": {
          "type": "number"
        },
        "current": {
          "type": "number"
        },
        "value": {
          "type": "number"
        }
      },
      "required": [
        "value",
        "current",
        "accumulated"
      ],
      "type": "object"
    },
    "Assets": {
      "additionalProperties": false,
      "description": "Assets to include in the output",
      "properties": {
        "nativeTokens": {
          "items": {
            "$ref": "#/definitions/INativeToken"
          },
          "type": "array"
        },
        "nftId": {
          "$ref": "#/definitions/HexEncodedString"
        }
      },
      "type": "object"
    },
    "Balance": {
      "additionalProperties": false,
      "description": "A balance",
      "properties": {
        "aliases": {
          "description": "Alias outputs",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "baseCoin": {
          "$ref": "#/definitions/BaseCoinBalance",
          "description": "The balance of the base coin"
        },
        "foundries": {
          "description": "Foundry outputs",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nativeTokens": {
          "description": "The balance of the native tokens",
          "items": {
            "$ref": "#/definitions/NativeTokenBalance"
          },
          "type": "array"
        },
        "nfts": {
          "description": "Nft outputs",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "potentiallyLockedOutputs": {
          "additionalProperties": {
            "type": "boolean"
          },
          "description": "Outputs with multiple unlock conditions and if they can currently be spent or not. If there is a TimelockUnlockCondition or ExpirationUnlockCondition this can change at any time",
          "type": "object"
        },
        "requiredStorageDeposit": {
          "$ref": "#/definitions/RequiredStorageDeposit",
          "description": "The required storage deposit for the outputs"
        }
      },
      "required": [
        "baseCoin",
        "requiredStorageDeposit",
        "nativeTokens",
        "nfts",
        "aliases",
        "foundries",
        "potentiallyLockedOutputs"
      ],
      "type": "object"
    },
    "BaseCoinBalance": {
      "additionalProperties": false,
      "description": "The balance of the base coin",
      "properties": {
        "available": {
          "description": "The amount of the outputs that aren't used in a transaction",
          "type": "string"
        },
        "total": {
          "description": "The total amount of the outputs",
          "type": "string"
        },
        "votingPower": {
          "description": "Voting power",
          "type": "string"
        }
      },
      "required": [
        "total",
        "available",
        "votingPower"
      ],
      "type": "object"
    },
    "BasicOutputBuilderParams": {
      "additionalProperties": false,
      "description": "Options for building a Basic Output",
      "properties": {
        "amount": {
          "description": "If not provided, minimum storage deposit will be used",
          "type": "string"
        },
        "features": {
          "description": "Features to be contained by the output.",
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "nativeTokens": {
          "description": "The native tokens to be held by the output.",
          "items": {
            "$ref": "#/definitions/INativeToken"
          },
          "type": "array"
        },
        "unlockConditions": {
          "description": "The unlock conditions for the output.",
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "unlockConditions"
      ],
      "type": "object"
    },
    "Block": {
      "additionalProperties": false,
      "description": "Block layout.",
      "properties": {
        "nonce": {
          "description": "The nonce for the block.",
          "type": "string"
        },
        "parents": {
          "description": "The parent block ids.",
          "items": {
            "$ref": "#/definitions/HexEncodedString"
          },
          "type": "array"
        },
        "payload": {
          "additionalProperties": false,
          "description": "The payload contents.",
          "type": "object"
        },
        "protocolVersion": {
          "description": "The protocol version under which this block operates.",
          "type": "number"
        }
      },
      "required": [
        "protocolVersion",
        "parents",
        "nonce"
      ],
      "type": "object"
    },
    "BlockId": {
      "description": "A block identifier, the BLAKE2b-256 hash of the block bytes. See <https://www.blake2.net/> for more information.",
      "type": "string"
    },
    "BuildAliasOutputData": {
      "additionalProperties": false,
      "description": "An alias output",
      "properties": {
        "aliasId": {
          "type": "string"
        },
        "amount": {
          "description": "If not provided, minimum storage deposit will be used",
          "type": "string"
        },
        "features": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "foundryCounter": {
          "type": "number"
        },
        "immutableFeatures": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "nativeTokens": {
          "$ref": "#/definitions/INativeToken"
        },
        "stateIndex": {
          "type": "number"
        },
        "stateMetadata": {
          "additionalProperties": {
            "type": "number"
          },
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "additionalProperties": false,
              "properties": {
                "byteLength": {
                  "type": "number"
                }
              },
              "required": [
                "byteLength"
              ],
              "type": "object"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "type": "object"
        },
        "unlockConditions": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "aliasId",
        "unlockConditions"
      ],
      "type": "object"
    },
    "BuildBasicOutputData": {
      "additionalProperties": false,
      "description": "A basic output",
      "properties": {
        "amount": {
          "description": "If not provided, minimum storage deposit will be used",
          "type": "string"
        },
        "features": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "nativeTokens": {
          "$ref": "#/definitions/INativeToken"
        },
        "unlockConditions": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "unlockConditions"
      ],
      "type": "object"
    },
    "BuildFoundryOutputData": {
      "additionalProperties": false,
      "description": "A foundry output",
      "properties": {
        "amount": {
          "description": "If not provided, minimum storage deposit will be used",
          "type": "string"
        },
        "features": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "immutableFeatures": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "nativeTokens": {
          "$ref": "#/definitions/INativeToken"
        },
        "serialNumber": {
          "type": "number"
        },
        "tokenScheme": {
          "additionalProperties": false,
          "type": "object"
        },
        "unlockConditions": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "serialNumber",
        "tokenScheme",
        "unlockConditions"
      ],
      "type": "object"
    },
    "BuildNftOutputData": {
      "additionalProperties": false,
      "description": "An nft output",
      "properties": {
        "amount": {
          "description": "If not provided, minimum storage deposit will be used",
          "type": "string"
        },
        "features": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "immutableFeatures": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "nativeTokens": {
          "$ref": "#/definitions/INativeToken"
        },
        "nftId": {
          "type": "string"
        },
        "unlockConditions": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "nftId",
        "unlockConditions"
      ],
      "type": "object"
    },
    "Burn": {
      "additionalProperties": false,
      "description": "A DTO for [`Burn`]",
      "properties": {
        "aliases": {
          "description": "Aliases to burn",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "foundries": {
          "description": "Foundries to burn",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nativeTokens": {
          "additionalProperties": false,
          "description": "Amounts of native tokens to burn",
          "properties": {
            "size": {
              "type": "number"
            }
          },
          "required": [
            "size"
          ],
          "type": "object"
        },
        "nfts": {
          "description": "NFTs to burn",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ChangeAddress": {
      "additionalProperties": false,
      "description": "ChangeAddress variant of RemainderValueStrategy",
      "properties": {
        "strategy": {
          "const": "ChangeAddress",
          "type": "string"
        },
        "value": {
          "type": "null"
        }
      },
      "required": [
        "strategy",
        "value"
      ],
      "type": "object"
    },
    "CoinType": {
      "description": "BIP44 Coin Types for IOTA and Shimmer.",
      "enum": [
        4218,
        4219,
        60
      ],
      "type": "number"
    },
    "ConflictReason": {
      "description": "Reason for block conflicts.",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        255
      ],
      "type": "number"
    },
    "CreateAccountPayload": {
      "additionalProperties": false,
      "description": "Options for account creation",
      "properties": {
        "alias": {
          "type": "string"
        },
        "bech32Hrp": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomAddress": {
      "additionalProperties": false,
      "description": "CustomAddress variant of RemainderValueStrategy",
      "properties": {
        "strategy": {
          "const": "CustomAddress",
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "strategy",
        "value"
      ],
      "type": "object"
    },
    "EventStatus": {
      "enum": [
        "upcoming",
        "commencing",
        "holding",
        "ended"
      ],
      "type": "string"
    },
    "Features": {
      "additionalProperties": false,
      "description": "Features to include in the output",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/HexEncodedString"
        },
        "sender": {
          "type": "string"
        },
        "tag": {
          "$ref": "#/definitions/HexEncodedString"
        }
      },
      "type": "object"
    },
    "FilterOptions": {
      "additionalProperties": false,
      "description": "Options to filter outputs",
      "properties": {
        "lowerBoundBookedTimestamp": {
          "description": "Filter all outputs where the booked milestone index is below the specified timestamp",
          "type": "number"
        },
        "outputTypes": {
          "additionalProperties": {
            "type": "number"
          },
          "description": "Filter all outputs for the provided types (Basic = 3, Alias = 4, Foundry = 5, NFT = 6)",
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "additionalProperties": false,
              "properties": {
                "byteLength": {
                  "type": "number"
                }
              },
              "required": [
                "byteLength"
              ],
              "type": "object"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "type": "object"
        },
        "upperBoundBookedTimestamp": {
          "description": "Filter all outputs where the booked milestone index is above the specified timestamp",
          "type": "number"
        }
      },
      "type": "object"
    },
    "FoundryOutputBuilderParams": {
      "additionalProperties": false,
      "description": "Options for building a Foundry Output",
      "properties": {
        "amount": {
          "description": "If not provided, minimum storage deposit will be used",
          "type": "string"
        },
        "features": {
          "description": "Features to be contained by the output.",
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "immutableFeatures": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "nativeTokens": {
          "description": "The native tokens to be held by the output.",
          "items": {
            "$ref": "#/definitions/INativeToken"
          },
          "type": "array"
        },
        "serialNumber": {
          "description": "The serial number of the foundry with respect to the controlling alias.",
          "type": "number"
        },
        "tokenScheme": {
          "additionalProperties": false,
          "description": "Simple token scheme.",
          "properties": {},
          "type": "object"
        },
        "unlockConditions": {
          "description": "The unlock conditions for the output.",
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "serialNumber",
        "tokenScheme",
        "unlockConditions"
      ],
      "type": "object"
    },
    "FoundryQueryParameter": {
      "anyOf": [
        {
          "additionalProperties": false,
          "description": "Filter foundry outputs based on bech32-encoded address of the controlling alias.",
          "properties": {
            "aliasAddress": {
              "type": "string"
            }
          },
          "required": [
            "aliasAddress"
          ],
          "type": "object"
        },
        {
          "anyOf": [
            {
              "additionalProperties": false,
              "description": "Filters outputs based on the presence of native tokens.",
              "properties": {
                "hasNativeTokens": {
                  "type": "boolean"
                }
              },
              "required": [
                "hasNativeTokens"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Filters outputs that have at least a certain number of distinct native tokens.",
              "properties": {
                "minNativeTokenCount": {
                  "type": "number"
                }
              },
              "required": [
                "minNativeTokenCount"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Filters outputs that have at most a certain number of distinct native tokens.",
              "properties": {
                "maxNativeTokenCount": {
                  "type": "number"
                }
              },
              "required": [
                "maxNativeTokenCount"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Return outputs that were created after a certain Unix timestamp.",
              "properties": {
                "createdAfter": {
                  "type": "number"
                }
              },
              "required": [
                "createdAfter"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Return outputs that were created before a certain Unix timestamp.",
              "properties": {
                "createdBefore": {
                  "type": "number"
                }
              },
              "required": [
                "createdBefore"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Define the page size for the results",
              "properties": {
                "pageSize": {
                  "type": "number"
                }
              },
              "required": [
                "pageSize"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Pass the cursor(confirmationMS+outputId.pageSize) to start the results from",
              "properties": {
                "cursor": {
                  "type": "string"
                }
              },
              "required": [
                "cursor"
              ],
              "type": "object"
            }
          ],
          "description": "Shared query parameters"
        }
      ],
      "description": "Query parameters for filtering Foundry Outputs"
    },
    "GenerateAddressOptions": {
      "additionalProperties": false,
      "description": "Options for address generation, useful with a Ledger Nano SecretManager",
      "properties": {
        "internal": {
          "type": "boolean"
        },
        "ledgerNanoPrompt": {
          "type": "boolean"
        }
      },
      "required": [
        "internal",
        "ledgerNanoPrompt"
      ],
      "type": "object"
    },
    "HexEncodedAmount": {
      "description": "Hex encoded U256.",
      "type": "string"
    },
    "HexEncodedString": {
      "description": "Hex encoded bytes.",
      "type": "string"
    },
    "IAuth": {
      "additionalProperties": false,
      "description": "Basic Auth or JWT.",
      "properties": {
        "basicAuthNamePwd": {
          "items": {
            "type": "string"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "jwt": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "IBip32Chain": {
      "description": "BIP 32 chain.",
      "items": {
        "type": "number"
      },
      "type": "array"
    },
    "IBlockIdResponse": {
      "additionalProperties": false,
      "description": "Block id response.",
      "properties": {
        "blockId": {
          "$ref": "#/definitions/HexEncodedString",
          "description": "The block id."
        }
      },
      "required": [
        "blockId"
      ],
      "type": "object"
    },
    "IBlockMetadata": {
      "additionalProperties": false,
      "description": "Response from the metadata endpoint.",
      "properties": {
        "blockId": {
          "$ref": "#/definitions/HexEncodedString",
          "description": "The block id."
        },
        "conflictReason": {
          "$ref": "#/definitions/ConflictReason",
          "description": "The conflict reason."
        },
        "isSolid": {
          "description": "Is the block solid.",
          "type": "boolean"
        },
        "ledgerInclusionState": {
          "$ref": "#/definitions/LedgerInclusionState",
          "description": "The ledger inclusion state."
        },
        "milestoneIndex": {
          "description": "Is this block a valid milestone.",
          "type": "number"
        },
        "parents": {
          "description": "The parent block ids.",
          "items": {
            "$ref": "#/definitions/HexEncodedString"
          },
          "type": "array"
        },
        "referencedByMilestoneIndex": {
          "description": "Is the block referenced by a milestone.",
          "type": "number"
        },
        "shouldPromote": {
          "description": "Should the block be promoted.",
          "type": "boolean"
        },
        "shouldReattach": {
          "description": "Should the block be reattached.",
          "type": "boolean"
        }
      },
      "required": [
        "blockId",
        "parents",
        "isSolid"
      ],
      "type": "object"
    },
    "IBuildBlockOptions": {
      "additionalProperties": false,
      "description": "Options to build a new block, possibly with payloads",
      "properties": {
        "accountIndex": {
          "type": "number"
        },
        "burn": {
          "$ref": "#/definitions/Burn",
          "description": "Explicit burning of aliases, nfts, foundries and native tokens"
        },
        "coinType": {
          "$ref": "#/definitions/CoinType"
        },
        "customRemainderAddress": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "initialAddressIndex": {
          "type": "number"
        },
        "inputRange": {
          "$ref": "#/definitions/IRange"
        },
        "inputs": {
          "items": {
            "additionalProperties": false,
            "description": "UTXO Transaction Input.",
            "properties": {
              "transactionId": {
                "$ref": "#/definitions/HexEncodedString",
                "description": "The transaction Id."
              },
              "transactionInputIndex": {
                "description": "The input index.",
                "type": "number"
              }
            },
            "required": [
              "transactionId",
              "transactionInputIndex"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "output": {
          "$ref": "#/definitions/IClientBlockBuilderOutputAddress",
          "description": "Bech32 encoded output address and amount"
        },
        "outputHex": {
          "$ref": "#/definitions/IClientBlockBuilderOutputAddress",
          "description": "Hex encoded output address and amount"
        },
        "outputs": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "parents": {
          "description": "Parent block IDs",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tag": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "IClientBlockBuilderOutputAddress": {
      "additionalProperties": false,
      "description": "Address with base coin amount",
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        }
      },
      "required": [
        "address",
        "amount"
      ],
      "type": "object"
    },
    "IClientOptions": {
      "additionalProperties": false,
      "description": "Options for the client builder",
      "properties": {
        "apiTimeout": {
          "$ref": "#/definitions/IDuration",
          "description": "Timeout for API requests"
        },
        "brokerOptions": {
          "$ref": "#/definitions/IMqttBrokerOptions",
          "description": "Options for the MQTT broker"
        },
        "ignoreNodeHealth": {
          "description": "If the node health status should be ignored",
          "type": "boolean"
        },
        "localPow": {
          "description": "Whether the PoW should be done locally or remotely.",
          "type": "boolean"
        },
        "minQuorumSize": {
          "description": "Minimum amount of nodes required for request when quorum is enabled",
          "type": "number"
        },
        "networkInfo": {
          "$ref": "#/definitions/INetworkInfo",
          "description": "Data related to the used network"
        },
        "nodeSyncInterval": {
          "$ref": "#/definitions/IDuration",
          "description": "Interval in which nodes will be checked for their sync status and the NetworkInfo gets updated"
        },
        "nodes": {
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/INode"
              }
            ]
          },
          "type": "array"
        },
        "permanodes": {
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/INode"
              }
            ]
          },
          "type": "array"
        },
        "powWorkerCount": {
          "description": "The amount of threads to be used for proof of work",
          "type": "number"
        },
        "primaryNode": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/INode"
            }
          ],
          "description": "Node which will be tried first for all requests"
        },
        "primaryPowNode": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/INode"
            }
          ],
          "description": "Node which will be tried first when using remote PoW, even before the primary_node"
        },
        "quorum": {
          "description": "If node quorum is enabled. Will compare the responses from multiple nodes and only returns the response if quorum_threshold of the nodes return the same one",
          "type": "boolean"
        },
        "quorumThreshold": {
          "description": "% of nodes that have to return the same response so it gets accepted",
          "type": "number"
        },
        "remotePowTimeout": {
          "$ref": "#/definitions/IDuration",
          "description": "Timeout when sending a block that requires remote proof of work"
        }
      },
      "type": "object"
    },
    "IDuration": {
      "additionalProperties": false,
      "description": "Time duration",
      "properties": {
        "nanos": {
          "type": "number"
        },
        "secs": {
          "type": "number"
        }
      },
      "required": [
        "secs",
        "nanos"
      ],
      "type": "object"
    },
    "IGenerateAddressOptions": {
      "additionalProperties": false,
      "description": "Options provided to Generate Address",
      "properties": {
        "ledgerNanoPrompt": {
          "description": "Display the address on ledger devices.",
          "type": "boolean"
        }
      },
      "required": [
        "ledgerNanoPrompt"
      ],
      "type": "object"
    },
    "IGenerateAddressesOptions": {
      "additionalProperties": false,
      "description": "Input options for GenerateAddresses",
      "properties": {
        "accountIndex": {
          "type": "number"
        },
        "bech32Hrp": {
          "description": "Bech32 human readable part",
          "type": "string"
        },
        "coinType": {
          "$ref": "#/definitions/CoinType"
        },
        "internal": {
          "description": "Internal addresses",
          "type": "boolean"
        },
        "options": {
          "$ref": "#/definitions/IGenerateAddressOptions"
        },
        "range": {
          "$ref": "#/definitions/IRange"
        }
      },
      "type": "object"
    },
    "IGossipHeartbeat": {
      "additionalProperties": false,
      "description": "Gossip heartbeat.",
      "properties": {
        "connectedPeers": {
          "description": "Connected peers.",
          "type": "number"
        },
        "latestMilestoneIndex": {
          "description": "Latest milestone index.",
          "type": "number"
        },
        "prunedMilestoneIndex": {
          "description": "Pruned milestone index.",
          "type": "number"
        },
        "solidMilestoneIndex": {
          "description": "Solid milestone index.",
          "type": "number"
        },
        "syncedPeers": {
          "description": "Synced peers.",
          "type": "number"
        }
      },
      "required": [
        "solidMilestoneIndex",
        "prunedMilestoneIndex",
        "latestMilestoneIndex",
        "connectedPeers",
        "syncedPeers"
      ],
      "type": "object"
    },
    "IGossipMetrics": {
      "additionalProperties": false,
      "description": "Gossip metrics.",
      "properties": {
        "droppedPackets": {
          "description": "The number of dropped sent packets.",
          "type": "number"
        },
        "knownBlocks": {
          "description": "The number of known blocks.",
          "type": "number"
        },
        "newBlocks": {
          "description": "The number of new blocks.",
          "type": "number"
        },
        "receivedBlockRequests": {
          "description": "The number of received block requests.",
          "type": "number"
        },
        "receivedBlocks": {
          "description": "The number of received blocks.",
          "type": "number"
        },
        "receivedHeartbeats": {
          "description": "The number of received heartbeats.",
          "type": "number"
        },
        "receivedMilestoneRequests": {
          "description": "The number of received milestone requests.",
          "type": "number"
        },
        "sentBlockRequests": {
          "description": "The number of sent block requests.",
          "type": "number"
        },
        "sentBlocks": {
          "description": "The number of sent blocks.",
          "type": "number"
        },
        "sentHeartbeats": {
          "description": "The number of sent heartbeats.",
          "type": "number"
        },
        "sentMilestoneRequests": {
          "description": "The number of sent miletsone requests.",
          "type": "number"
        }
      },
      "required": [
        "newBlocks",
        "knownBlocks",
        "receivedBlocks",
        "receivedBlockRequests",
        "receivedMilestoneRequests",
        "receivedHeartbeats",
        "sentBlocks",
        "sentBlockRequests",
        "sentMilestoneRequests",
        "sentHeartbeats",
        "droppedPackets"
      ],
      "type": "object"
    },
    "ILoggerConfig": {
      "additionalProperties": false,
      "description": "Logger output configuration.",
      "properties": {
        "colorEnabled": {
          "description": "Color flag of an output.",
          "type": "boolean"
        },
        "levelFilter": {
          "description": "Log level filter of an output.",
          "enum": [
            "off",
            "error",
            "warn",
            "info",
            "debug",
            "trace"
          ],
          "type": "string"
        },
        "name": {
          "description": "Name of an output file, or `stdout` for standard output.",
          "type": "string"
        },
        "targetExclusions": {
          "description": "Log target exclusions of an output.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "targetFilter": {
          "description": "Log target filters of an output.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "IMilestoneUtxoChangesResponse": {
      "additionalProperties": false,
      "description": "Milestone.",
      "properties": {
        "consumedOutputs": {
          "description": "The output IDs (transaction hash + output index) of the consumed (spent) outputs.",
          "items": {
            "$ref": "#/definitions/HexEncodedString"
          },
          "type": "array"
        },
        "createdOutputs": {
          "description": "The output IDs (transaction hash + output index) of the newly created outputs.",
          "items": {
            "$ref": "#/definitions/HexEncodedString"
          },
          "type": "array"
        },
        "index": {
          "description": "The milestone index.",
          "type": "number"
        }
      },
      "required": [
        "index",
        "createdOutputs",
        "consumedOutputs"
      ],
      "type": "object"
    },
    "IMqttBrokerOptions": {
      "additionalProperties": false,
      "description": "Options for the MQTT broker.",
      "properties": {
        "automaticDisconnect": {
          "type": "boolean"
        },
        "maxReconnectionAttempts": {
          "type": "number"
        },
        "port": {
          "type": "number"
        },
        "timeout": {
          "description": "timeout in seconds",
          "type": "number"
        },
        "useWs": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "INativeToken": {
      "additionalProperties": false,
      "description": "Native token.",
      "properties": {
        "amount": {
          "$ref": "#/definitions/HexEncodedAmount",
          "description": "Amount of native tokens of the given Token ID."
        },
        "id": {
          "$ref": "#/definitions/HexEncodedString",
          "description": "Identifier of the native token."
        }
      },
      "required": [
        "id",
        "amount"
      ],
      "type": "object"
    },
    "INetworkInfo": {
      "additionalProperties": false,
      "description": "Struct containing network and PoW related information",
      "properties": {
        "fallbackToLocalPow": {
          "description": "Fallback to local proof of work if the node doesn't support remote Pow",
          "type": "boolean"
        },
        "localPow": {
          "description": "Local proof of work",
          "type": "boolean"
        },
        "minPowScore": {
          "description": "Minimum proof of work score",
          "type": "number"
        },
        "protocolParameters": {
          "$ref": "#/definitions/INodeInfoProtocol",
          "description": "Protocol parameters"
        },
        "tipsInterval": {
          "description": "Tips request interval during PoW in seconds",
          "type": "number"
        }
      },
      "required": [
        "protocolParameters",
        "minPowScore",
        "localPow",
        "fallbackToLocalPow",
        "tipsInterval"
      ],
      "type": "object"
    },
    "INode": {
      "additionalProperties": false,
      "description": "A node object for the client.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/IAuth"
        },
        "disabled": {
          "type": "boolean"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "INodeInfo": {
      "additionalProperties": false,
      "description": "Response from the /info endpoint.",
      "properties": {
        "baseToken": {
          "$ref": "#/definitions/INodeInfoBaseToken",
          "description": "The base token info of the node."
        },
        "features": {
          "description": "Features supported by the node.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "metrics": {
          "$ref": "#/definitions/INodeInfoMetrics",
          "description": "The metrics for the node."
        },
        "name": {
          "description": "The name of the node.",
          "type": "string"
        },
        "pendingProtocolParameters": {
          "description": "Pending protocol parameters.",
          "items": {
            "$ref": "#/definitions/NodeInfoProtocolParamsMilestoneOpt"
          },
          "type": "array"
        },
        "protocol": {
          "$ref": "#/definitions/INodeInfoProtocol",
          "description": "The protocol info of the node."
        },
        "status": {
          "$ref": "#/definitions/INodeInfoStatus",
          "description": "The status of the node."
        },
        "supportedProtocolVersions": {
          "description": "The supported protocol versions.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "version": {
          "description": "The version of node.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "version",
        "status",
        "metrics",
        "supportedProtocolVersions",
        "protocol",
        "pendingProtocolParameters",
        "baseToken",
        "features"
      ],
      "type": "object"
    },
    "INodeInfoBaseToken": {
      "additionalProperties": false,
      "description": "The base token info of the node.",
      "properties": {
        "decimals": {
          "description": "The base token decimals.",
          "type": "number"
        },
        "name": {
          "description": "The base token name.",
          "type": "string"
        },
        "subunit": {
          "description": "The base token sub-unit.",
          "type": "string"
        },
        "tickerSymbol": {
          "description": "The base token ticker symbol.",
          "type": "string"
        },
        "unit": {
          "description": "The base token unit.",
          "type": "string"
        },
        "useMetricPrefix": {
          "description": "The use metric prefix flag.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "tickerSymbol",
        "unit",
        "decimals",
        "useMetricPrefix"
      ],
      "type": "object"
    },
    "INodeInfoMetrics": {
      "additionalProperties": false,
      "description": "Response from the /info endpoint.",
      "properties": {
        "blocksPerSecond": {
          "description": "Blocks per second.",
          "type": "number"
        },
        "referencedBlocksPerSecond": {
          "description": "Referenced blocks per second.",
          "type": "number"
        },
        "referencedRate": {
          "description": "The rate at which rates are being referenced.",
          "type": "number"
        }
      },
      "required": [
        "blocksPerSecond",
        "referencedBlocksPerSecond",
        "referencedRate"
      ],
      "type": "object"
    },
    "INodeInfoMilestone": {
      "additionalProperties": false,
      "description": "The milestone info.",
      "properties": {
        "index": {
          "description": "The milestone index.",
          "type": "number"
        },
        "milestoneId": {
          "$ref": "#/definitions/HexEncodedString",
          "description": "The milestone id."
        },
        "timestamp": {
          "description": "The milestone timestamp.",
          "type": "number"
        }
      },
      "required": [
        "index"
      ],
      "type": "object"
    },
    "INodeInfoProtocol": {
      "additionalProperties": false,
      "description": "The Protocol Info.",
      "properties": {
        "bech32Hrp": {
          "description": "The human readable part of bech32 addresses.",
          "type": "string"
        },
        "minPowScore": {
          "description": "The minimum score required for PoW.",
          "type": "number"
        },
        "networkName": {
          "description": "The human friendly name of the network on which the node operates on.",
          "type": "string"
        },
        "rentStructure": {
          "$ref": "#/definitions/IRent",
          "description": "The rent structure used by given node/network."
        },
        "tokenSupply": {
          "description": "The token supply.",
          "type": "string"
        },
        "version": {
          "description": "The protocol version.",
          "type": "number"
        }
      },
      "required": [
        "networkName",
        "bech32Hrp",
        "tokenSupply",
        "version",
        "minPowScore",
        "rentStructure"
      ],
      "type": "object"
    },
    "INodeInfoStatus": {
      "additionalProperties": false,
      "description": "Response from the /info endpoint.",
      "properties": {
        "confirmedMilestone": {
          "$ref": "#/definitions/INodeInfoMilestone",
          "description": "The confirmed milestone info."
        },
        "isHealthy": {
          "description": "Is the node healthy.",
          "type": "boolean"
        },
        "latestMilestone": {
          "$ref": "#/definitions/INodeInfoMilestone",
          "description": "The latest milestone info."
        },
        "pruningIndex": {
          "description": "The pruning index.",
          "type": "number"
        }
      },
      "required": [
        "isHealthy",
        "latestMilestone",
        "confirmedMilestone",
        "pruningIndex"
      ],
      "type": "object"
    },
    "INodeInfoWrapper": {
      "additionalProperties": false,
      "description": "NodeInfo wrapper which contains the node info and the url from the node (useful when multiple nodes are used)",
      "properties": {
        "nodeInfo": {
          "$ref": "#/definitions/INodeInfo",
          "description": "The node info"
        },
        "url": {
          "description": "The url of the node",
          "type": "string"
        }
      },
      "required": [
        "nodeInfo",
        "url"
      ],
      "type": "object"
    },
    "IOutputMetadataResponse": {
      "additionalProperties": false,
      "description": "Details of an output.",
      "properties": {
        "blockId": {
          "$ref": "#/definitions/HexEncodedString",
          "description": "The block id the output was contained in."
        },
        "isSpent": {
          "description": "Is the output spent.",
          "type": "boolean"
        },
        "ledgerIndex": {
          "description": "The ledger index at which these output was available at.",
          "type": "number"
        },
        "milestoneIndexBooked": {
          "description": "The milestone index at which this output was booked into the ledger.",
          "type": "number"
        },
        "milestoneIndexSpent": {
          "description": "The milestone index at which this output was spent.",
          "type": "number"
        },
        "milestoneTimestampBooked": {
          "description": "The milestone timestamp this output was booked in the ledger.",
          "type": "number"
        },
        "milestoneTimestampSpent": {
          "description": "The milestone timestamp this output was spent.",
          "type": "number"
        },
        "outputIndex": {
          "description": "The index for the output.",
          "type": "number"
        },
        "transactionId": {
          "$ref": "#/definitions/HexEncodedString",
          "description": "The transaction id for the output."
        },
        "transactionIdSpent": {
          "$ref": "#/definitions/HexEncodedString",
          "description": "The transaction this output was spent with."
        }
      },
      "required": [
        "blockId",
        "transactionId",
        "outputIndex",
        "isSpent",
        "milestoneIndexBooked",
        "milestoneTimestampBooked",
        "ledgerIndex"
      ],
      "type": "object"
    },
    "IOutputsResponse": {
      "additionalProperties": false,
      "description": "Details of an outputs response from the indexer plugin.",
      "properties": {
        "cursor": {
          "description": "The cursor to use for getting the next results.",
          "type": "string"
        },
        "items": {
          "description": "The output IDs (transaction hash + output index) of the outputs on this address.",
          "items": {
            "$ref": "#/definitions/HexEncodedString"
          },
          "type": "array"
        },
        "ledgerIndex": {
          "description": "The ledger index at which these outputs where available at.",
          "type": "number"
        },
        "pageSize": {
          "description": "The maximum count of results that are returned by the node.",
          "type": "string"
        }
      },
      "required": [
        "ledgerIndex",
        "pageSize",
        "items"
      ],
      "type": "object"
    },
    "IPeer": {
      "additionalProperties": false,
      "description": "Peer details.",
      "properties": {
        "alias": {
          "description": "The alias of the peer.",
          "type": "string"
        },
        "connected": {
          "description": "Is it connected.",
          "type": "boolean"
        },
        "gossip": {
          "additionalProperties": false,
          "description": "Gossip metrics for the peer.",
          "properties": {
            "heartbeat": {
              "$ref": "#/definitions/IGossipHeartbeat",
              "description": "The peer heartbeat."
            },
            "metrics": {
              "$ref": "#/definitions/IGossipMetrics",
              "description": "The peer metrics."
            }
          },
          "required": [
            "heartbeat",
            "metrics"
          ],
          "type": "object"
        },
        "id": {
          "description": "The id of the peer.",
          "type": "string"
        },
        "multiAddresses": {
          "description": "The addresses of the peer.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "relation": {
          "description": "The relation of the peer.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "multiAddresses",
        "relation",
        "connected"
      ],
      "type": "object"
    },
    "IRange": {
      "additionalProperties": false,
      "description": "A range with start and end values.",
      "properties": {
        "end": {
          "type": "number"
        },
        "start": {
          "type": "number"
        }
      },
      "required": [
        "start",
        "end"
      ],
      "type": "object"
    },
    "IRent": {
      "additionalProperties": false,
      "description": "Defines the parameters of rent cost calculations on objects which take node resources.",
      "properties": {
        "vByteCost": {
          "description": "Defines the rent of a single virtual byte denoted in IOTA token.",
          "type": "number"
        },
        "vByteFactorData": {
          "description": "The factor to be used for data only fields.",
          "type": "number"
        },
        "vByteFactorKey": {
          "description": "The factor to be used for key/lookup generating fields.",
          "type": "number"
        }
      },
      "required": [
        "vByteCost",
        "vByteFactorData",
        "vByteFactorKey"
      ],
      "type": "object"
    },
    "IResponse": {
      "additionalProperties": false,
      "description": "Base response data.",
      "properties": {
        "error": {
          "additionalProperties": false,
          "description": "Optional error in the response.",
          "properties": {
            "code": {
              "description": "The code for the error response.",
              "type": "string"
            },
            "message": {
              "description": "A more descriptive version of the error.",
              "type": "string"
            }
          },
          "required": [
            "code",
            "message"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "IRoutesResponse": {
      "additionalProperties": false,
      "description": "Response from the /routes endpoint.",
      "properties": {
        "routes": {
          "description": "The routes the node exposes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "routes"
      ],
      "type": "object"
    },
    "ITipsResponse": {
      "additionalProperties": false,
      "description": "Response from the tips endpoint.",
      "properties": {
        "tips": {
          "description": "The block ids of the tip.",
          "items": {
            "$ref": "#/definitions/HexEncodedString"
          },
          "type": "array"
        }
      },
      "required": [
        "tips"
      ],
      "type": "object"
    },
    "InclusionState": {
      "description": "Possible InclusionStates of transactions sent with the wallet",
      "enum": [
        "Pending",
        "Confirmed",
        "Conflicting",
        "UnknownPruned"
      ],
      "type": "string"
    },
    "InputSigningData": {
      "additionalProperties": false,
      "description": "Data for transaction inputs for signing and ordering of unlock blocks",
      "properties": {
        "chain": {
          "$ref": "#/definitions/IBip32Chain",
          "description": "The chain derived from seed, only for ed25519 addresses"
        },
        "output": {
          "additionalProperties": false,
          "description": "The output",
          "type": "object"
        },
        "outputMetadata": {
          "$ref": "#/definitions/IOutputMetadataResponse",
          "description": "The output metadata"
        }
      },
      "required": [
        "output",
        "outputMetadata"
      ],
      "type": "object"
    },
    "LedgerApp": {
      "additionalProperties": false,
      "description": "The current opened app",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "version"
      ],
      "type": "object"
    },
    "LedgerDeviceType": {
      "description": "The Ledger Device Type",
      "enum": [
        "ledgerNanoS",
        "ledgerNanoX",
        "ledgerNanoSPlus"
      ],
      "type": "string"
    },
    "LedgerInclusionState": {
      "description": "The different states of ledger inclusion.",
      "enum": [
        "noTransaction",
        "included",
        "conflicting"
      ],
      "type": "string"
    },
    "LedgerNanoSecretManager": {
      "additionalProperties": false,
      "description": "Secret manager that uses a Ledger Nano hardware wallet or Speculos simulator.",
      "properties": {
        "ledgerNano": {
          "description": "boolean indicates whether it's a simulator or not.",
          "type": "boolean"
        }
      },
      "required": [
        "ledgerNano"
      ],
      "type": "object"
    },
    "LedgerNanoStatus": {
      "additionalProperties": false,
      "description": "The status of a Ledger Nano",
      "properties": {
        "app": {
          "$ref": "#/definitions/LedgerApp"
        },
        "blindSigningEnabled": {
          "type": "boolean"
        },
        "bufferSize": {
          "type": "number"
        },
        "connected": {
          "type": "boolean"
        },
        "device": {
          "$ref": "#/definitions/LedgerDeviceType"
        },
        "locked": {
          "type": "boolean"
        }
      },
      "required": [
        "connected",
        "blindSigningEnabled"
      ],
      "type": "object"
    },
    "MigratedFunds": {
      "additionalProperties": false,
      "description": "The migrated funds for receipts.",
      "properties": {
        "address": {
          "additionalProperties": false,
          "description": "The target address of the migrated funds.",
          "type": "object"
        },
        "deposit": {
          "description": "The amount of the deposit.",
          "type": "string"
        },
        "tailTransactionHash": {
          "$ref": "#/definitions/HexEncodedString",
          "description": "The tail transaction hash of the migration bundle."
        }
      },
      "required": [
        "tailTransactionHash",
        "address",
        "deposit"
      ],
      "type": "object"
    },
    "MilestoneId": {
      "type": "string"
    },
    "MilestoneReceipt": {
      "additionalProperties": false,
      "properties": {
        "milestoneIndex": {
          "description": "The milestone index.",
          "type": "number"
        },
        "receipt": {
          "$ref": "#/definitions/ReceiptMilestoneOption",
          "description": "The receipt."
        }
      },
      "required": [
        "milestoneIndex",
        "receipt"
      ],
      "type": "object"
    },
    "MintNativeTokenParams": {
      "additionalProperties": false,
      "description": "Native token options for minting",
      "properties": {
        "aliasId": {
          "type": "string"
        },
        "circulatingSupply": {
          "$ref": "#/definitions/HexEncodedAmount",
          "description": "Hex encoded number"
        },
        "foundryMetadata": {
          "description": "Hex encoded bytes",
          "type": "string"
        },
        "maximumSupply": {
          "$ref": "#/definitions/HexEncodedAmount",
          "description": "Hex encoded number"
        }
      },
      "required": [
        "circulatingSupply",
        "maximumSupply"
      ],
      "type": "object"
    },
    "MintNftParams": {
      "additionalProperties": false,
      "description": "Nft options for minting",
      "properties": {
        "address": {
          "description": "Bech32 encoded address to which the Nft will be minted. Default will use the first address of the account",
          "type": "string"
        },
        "immutableMetadata": {
          "description": "Hex encoded bytes",
          "type": "string"
        },
        "issuer": {
          "description": "Bech32 encoded issuer address *",
          "type": "string"
        },
        "metadata": {
          "description": "Hex encoded bytes",
          "type": "string"
        },
        "sender": {
          "description": "Bech32 encoded sender address *",
          "type": "string"
        },
        "tag": {
          "description": "Hex encoded bytes",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MintTokenTransaction": {
      "additionalProperties": false,
      "description": "The result of a minting operation",
      "properties": {
        "tokenId": {
          "description": "The token id of the minted token",
          "type": "string"
        },
        "transaction": {
          "$ref": "#/definitions/Transaction",
          "description": "The transaction which minted the token"
        }
      },
      "required": [
        "tokenId",
        "transaction"
      ],
      "type": "object"
    },
    "MnemonicSecretManager": {
      "additionalProperties": false,
      "description": "Secret manager that uses a mnemonic.",
      "properties": {
        "mnemonic": {
          "type": "string"
        }
      },
      "required": [
        "mnemonic"
      ],
      "type": "object"
    },
    "NamedParameters<typeof parsePayload>": {
      "additionalProperties": false,
      "properties": {
        "data": {}
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "NativeTokenBalance": {
      "additionalProperties": false,
      "description": "The balance of a native token",
      "properties": {
        "available": {
          "$ref": "#/definitions/HexEncodedAmount"
        },
        "metadata": {
          "type": "string"
        },
        "tokenId": {
          "$ref": "#/definitions/HexEncodedString"
        },
        "total": {
          "$ref": "#/definitions/HexEncodedAmount"
        }
      },
      "required": [
        "tokenId",
        "total",
        "available"
      ],
      "type": "object"
    },
    "Network": {
      "description": "Network types.",
      "enum": [
        0,
        1
      ],
      "type": "number"
    },
    "NftOutputBuilderParams": {
      "additionalProperties": false,
      "description": "Options for building an Nft Output",
      "properties": {
        "amount": {
          "description": "If not provided, minimum storage deposit will be used",
          "type": "string"
        },
        "features": {
          "description": "Features to be contained by the output.",
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "immutableFeatures": {
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        },
        "nativeTokens": {
          "description": "The native tokens to be held by the output.",
          "items": {
            "$ref": "#/definitions/INativeToken"
          },
          "type": "array"
        },
        "nftId": {
          "$ref": "#/definitions/HexEncodedString"
        },
        "unlockConditions": {
          "description": "The unlock conditions for the output.",
          "items": {
            "additionalProperties": false,
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "nftId",
        "unlockConditions"
      ],
      "type": "object"
    },
    "NftQueryParameter": {
      "anyOf": [
        {
          "additionalProperties": false,
          "description": "Bech32-encoded address that should be searched for.",
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter foundry outputs based on bech32-encoded address of the controlling alias.",
          "properties": {
            "aliasAddress": {
              "type": "string"
            }
          },
          "required": [
            "aliasAddress"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filters outputs based on the presence of storage deposit return unlock condition.",
          "properties": {
            "hasStorageDepositReturn": {
              "type": "boolean"
            }
          },
          "required": [
            "hasStorageDepositReturn"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter outputs based on the presence of a specific Bech32-encoded return address in the storage deposit return unlock condition.",
          "properties": {
            "storageDepositReturnAddress": {
              "type": "string"
            }
          },
          "required": [
            "storageDepositReturnAddress"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filters outputs based on the presence of timelock unlock condition.",
          "properties": {
            "hasTimelock": {
              "type": "boolean"
            }
          },
          "required": [
            "hasTimelock"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Return outputs that are timelocked before a certain Unix timestamp.",
          "properties": {
            "timelockedBefore": {
              "type": "number"
            }
          },
          "required": [
            "timelockedBefore"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Return outputs that are timelocked after a certain Unix timestamp.",
          "properties": {
            "timelockedAfter": {
              "type": "number"
            }
          },
          "required": [
            "timelockedAfter"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filters outputs based on the presence of expiration unlock condition.",
          "properties": {
            "hasExpiration": {
              "type": "boolean"
            }
          },
          "required": [
            "hasExpiration"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Return outputs that expire before a certain Unix timestamp.",
          "properties": {
            "expiresBefore": {
              "type": "number"
            }
          },
          "required": [
            "expiresBefore"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Return outputs that expire after a certain Unix timestamp.",
          "properties": {
            "expiresAfter": {
              "type": "number"
            }
          },
          "required": [
            "expiresAfter"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter outputs based on the presence of a specific Bech32-encoded return address in the expiration unlock condition.",
          "properties": {
            "expirationReturnAddress": {
              "type": "string"
            }
          },
          "required": [
            "expirationReturnAddress"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter for a certain sender",
          "properties": {
            "sender": {
              "type": "string"
            }
          },
          "required": [
            "sender"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter for a certain tag",
          "properties": {
            "tag": {
              "type": "string"
            }
          },
          "required": [
            "tag"
          ],
          "type": "object"
        },
        {
          "anyOf": [
            {
              "additionalProperties": false,
              "description": "Filters outputs based on the presence of native tokens.",
              "properties": {
                "hasNativeTokens": {
                  "type": "boolean"
                }
              },
              "required": [
                "hasNativeTokens"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Filters outputs that have at least a certain number of distinct native tokens.",
              "properties": {
                "minNativeTokenCount": {
                  "type": "number"
                }
              },
              "required": [
                "minNativeTokenCount"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Filters outputs that have at most a certain number of distinct native tokens.",
              "properties": {
                "maxNativeTokenCount": {
                  "type": "number"
                }
              },
              "required": [
                "maxNativeTokenCount"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Return outputs that were created after a certain Unix timestamp.",
              "properties": {
                "createdAfter": {
                  "type": "number"
                }
              },
              "required": [
                "createdAfter"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Return outputs that were created before a certain Unix timestamp.",
              "properties": {
                "createdBefore": {
                  "type": "number"
                }
              },
              "required": [
                "createdBefore"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Define the page size for the results",
              "properties": {
                "pageSize": {
                  "type": "number"
                }
              },
              "required": [
                "pageSize"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Pass the cursor(confirmationMS+outputId.pageSize) to start the results from",
              "properties": {
                "cursor": {
                  "type": "string"
                }
              },
              "required": [
                "cursor"
              ],
              "type": "object"
            }
          ],
          "description": "Shared query parameters"
        }
      ],
      "description": "Query parameters for filtering Nft Outputs"
    },
    "NftSyncOptions": {
      "additionalProperties": false,
      "description": "Specifies what outputs should be synced for the address of an nft output.",
      "properties": {
        "aliasOutputs": {
          "type": "boolean"
        },
        "basicOutputs": {
          "type": "boolean"
        },
        "nftOutputs": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "NodeInfoProtocolParamsMilestoneOpt": {
      "additionalProperties": false,
      "description": "Defines changing protocol parameters in a milestone.",
      "properties": {
        "params": {
          "description": "The protocol parameters in binary form. Hex-encoded with 0x prefix.",
          "type": "string"
        },
        "protocolVersion": {
          "description": "The to be applied protocol version.",
          "type": "number"
        },
        "targetMilestoneIndex": {
          "description": "The milestone index at which these protocol parameters become active.",
          "type": "number"
        }
      },
      "required": [
        "params",
        "protocolVersion",
        "targetMilestoneIndex"
      ],
      "type": "object"
    },
    "OutputData": {
      "additionalProperties": false,
      "description": "An output with metadata",
      "properties": {
        "address": {
          "additionalProperties": false,
          "description": "Associated account address",
          "type": "object"
        },
        "chain": {
          "description": "BIP32 path",
          "items": {
            "$ref": "#/definitions/Segment"
          },
          "type": "array"
        },
        "isSpent": {
          "description": "If an output is spent",
          "type": "boolean"
        },
        "metadata": {
          "$ref": "#/definitions/IOutputMetadataResponse",
          "description": "The metadata of the output"
        },
        "networkId": {
          "description": "Network ID",
          "type": "string"
        },
        "output": {
          "additionalProperties": false,
          "description": "The actual Output",
          "type": "object"
        },
        "outputId": {
          "$ref": "#/definitions/OutputId",
          "description": "The identifier of an Output"
        },
        "remainder": {
          "description": "Remainder",
          "type": "boolean"
        }
      },
      "required": [
        "outputId",
        "metadata",
        "output",
        "isSpent",
        "address",
        "networkId",
        "remainder"
      ],
      "type": "object"
    },
    "OutputId": {
      "type": "string"
    },
    "OutputParams": {
      "additionalProperties": false,
      "description": "Options for the creation of an output",
      "properties": {
        "amount": {
          "type": "string"
        },
        "assets": {
          "$ref": "#/definitions/Assets"
        },
        "features": {
          "$ref": "#/definitions/Features"
        },
        "recipientAddress": {
          "type": "string"
        },
        "storageDeposit": {
          "$ref": "#/definitions/StorageDeposit"
        },
        "unlocks": {
          "$ref": "#/definitions/Unlocks"
        }
      },
      "required": [
        "recipientAddress",
        "amount"
      ],
      "type": "object"
    },
    "OutputResponse": {
      "additionalProperties": false,
      "description": "Details of an output.",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/IOutputMetadataResponse",
          "description": "The metadata about the output."
        },
        "output": {
          "additionalProperties": false,
          "description": "The output.",
          "type": "object"
        }
      },
      "required": [
        "metadata",
        "output"
      ],
      "type": "object"
    },
    "OutputsToClaim": {
      "description": "Output to claim",
      "enum": [
        "MicroTransactions",
        "NativeTokens",
        "Nfts",
        "Amount",
        "All"
      ],
      "type": "string"
    },
    "ParticipationEvent": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/ParticipationEventData"
        },
        "id": {
          "$ref": "#/definitions/ParticipationEventId"
        }
      },
      "required": [
        "id",
        "data"
      ],
      "type": "object"
    },
    "ParticipationEventData": {
      "additionalProperties": false,
      "properties": {
        "additionalInfo": {
          "type": "string"
        },
        "milestoneIndexCommence": {
          "type": "number"
        },
        "milestoneIndexEnd": {
          "type": "number"
        },
        "milestoneIndexStart": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "payload": {
          "$ref": "#/definitions/ParticipationEventPayload"
        }
      },
      "required": [
        "name",
        "milestoneIndexCommence",
        "milestoneIndexStart",
        "milestoneIndexEnd",
        "payload",
        "additionalInfo"
      ],
      "type": "object"
    },
    "ParticipationEventId": {
      "type": "string"
    },
    "ParticipationEventMap": {
      "additionalProperties": {
        "$ref": "#/definitions/ParticipationEventWithNodes"
      },
      "type": "object"
    },
    "ParticipationEventPayload": {
      "anyOf": [
        {
          "$ref": "#/definitions/VotingEventPayload"
        },
        {
          "$ref": "#/definitions/StakingEventPayload"
        }
      ]
    },
    "ParticipationEventRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "eventsToIgnore": {
          "items": {
            "$ref": "#/definitions/ParticipationEventId"
          },
          "type": "array"
        },
        "eventsToRegister": {
          "items": {
            "$ref": "#/definitions/ParticipationEventId"
          },
          "type": "array"
        },
        "node": {
          "$ref": "#/definitions/INode"
        }
      },
      "required": [
        "node"
      ],
      "type": "object"
    },
    "ParticipationEventStatus": {
      "additionalProperties": false,
      "properties": {
        "checksum": {
          "type": "string"
        },
        "milestoneIndex": {
          "type": "number"
        },
        "questions": {
          "items": {
            "$ref": "#/definitions/QuestionStatus"
          },
          "type": "array"
        },
        "status": {
          "$ref": "#/definitions/EventStatus"
        }
      },
      "required": [
        "milestoneIndex",
        "status",
        "checksum"
      ],
      "type": "object"
    },
    "ParticipationEventType": {
      "enum": [
        0,
        1
      ],
      "type": "number"
    },
    "ParticipationEventWithNodes": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/ParticipationEventData"
        },
        "id": {
          "$ref": "#/definitions/ParticipationEventId"
        },
        "nodes": {
          "items": {
            "$ref": "#/definitions/INode"
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "data",
        "nodes"
      ],
      "type": "object"
    },
    "ParticipationOverview": {
      "additionalProperties": false,
      "properties": {
        "participations": {
          "$ref": "#/definitions/Participations"
        }
      },
      "required": [
        "participations"
      ],
      "type": "object"
    },
    "Participations": {
      "additionalProperties": {
        "additionalProperties": {
          "$ref": "#/definitions/TrackedParticipationOverview"
        },
        "type": "object"
      },
      "type": "object"
    },
    "PlaceholderSecretManager": {
      "const": "placeholder",
      "description": "Placeholder secret manager that can't do anything.",
      "type": "string"
    },
    "PreparedMintTokenTransaction": {
      "additionalProperties": false,
      "properties": {},
      "type": "object"
    },
    "PreparedMintTokenTransactionData": {
      "additionalProperties": false,
      "description": "The result of preparing a minting operation",
      "properties": {
        "tokenId": {
          "description": "The token id of the minted token",
          "type": "string"
        },
        "transaction": {
          "$ref": "#/definitions/PreparedTransactionData",
          "description": "The prepared transaction which will mint the token"
        }
      },
      "required": [
        "tokenId",
        "transaction"
      ],
      "type": "object"
    },
    "PreparedTransaction": {
      "additionalProperties": false,
      "description": "PreparedTransaction` is a class that represents prepared transaction data, which is useful for offline signing. It contains the prepared transaction data and an `Account` object. It provides methods to retrieve the prepared transaction data, sign the transaction and sign+submit/send the transaction.",
      "type": "object"
    },
    "PreparedTransactionData": {
      "additionalProperties": false,
      "description": "Helper struct for offline signing",
      "properties": {
        "essence": {
          "additionalProperties": false,
          "description": "Transaction essence",
          "type": "object"
        },
        "inputsData": {
          "description": "Required address information for signing",
          "items": {
            "$ref": "#/definitions/InputSigningData"
          },
          "type": "array"
        },
        "remainder": {
          "$ref": "#/definitions/Remainder",
          "description": "Optional remainder output information"
        }
      },
      "required": [
        "essence",
        "inputsData"
      ],
      "type": "object"
    },
    "ProtocolParamsMilestoneOption": {
      "additionalProperties": false,
      "description": "Protocol Parameters Milestone Option.",
      "properties": {
        "params": {
          "description": "The protocol parameters in binary form. Hex-encoded with 0x prefix.",
          "type": "string"
        },
        "protocolVersion": {
          "description": "The to be applied protocol version.",
          "type": "number"
        },
        "targetMilestoneIndex": {
          "description": "The milestone index at which these protocol parameters become active.",
          "type": "number"
        }
      },
      "required": [
        "targetMilestoneIndex",
        "protocolVersion",
        "params"
      ],
      "type": "object"
    },
    "QueryParameter": {
      "anyOf": [
        {
          "additionalProperties": false,
          "description": "Bech32-encoded address that should be searched for.",
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter foundry outputs based on bech32-encoded address of the controlling alias.",
          "properties": {
            "aliasAddress": {
              "type": "string"
            }
          },
          "required": [
            "aliasAddress"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filters outputs based on the presence of storage deposit return unlock condition.",
          "properties": {
            "hasStorageDepositReturn": {
              "type": "boolean"
            }
          },
          "required": [
            "hasStorageDepositReturn"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter outputs based on the presence of a specific Bech32-encoded return address in the storage deposit return unlock condition.",
          "properties": {
            "storageDepositReturnAddress": {
              "type": "string"
            }
          },
          "required": [
            "storageDepositReturnAddress"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filters outputs based on the presence of timelock unlock condition.",
          "properties": {
            "hasTimelock": {
              "type": "boolean"
            }
          },
          "required": [
            "hasTimelock"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Return outputs that are timelocked before a certain Unix timestamp.",
          "properties": {
            "timelockedBefore": {
              "type": "number"
            }
          },
          "required": [
            "timelockedBefore"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Return outputs that are timelocked after a certain Unix timestamp.",
          "properties": {
            "timelockedAfter": {
              "type": "number"
            }
          },
          "required": [
            "timelockedAfter"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filters outputs based on the presence of expiration unlock condition.",
          "properties": {
            "hasExpiration": {
              "type": "boolean"
            }
          },
          "required": [
            "hasExpiration"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Return outputs that expire before a certain Unix timestamp.",
          "properties": {
            "expiresBefore": {
              "type": "number"
            }
          },
          "required": [
            "expiresBefore"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Return outputs that expire after a certain Unix timestamp.",
          "properties": {
            "expiresAfter": {
              "type": "number"
            }
          },
          "required": [
            "expiresAfter"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter outputs based on the presence of a specific Bech32-encoded return address in the expiration unlock condition.",
          "properties": {
            "expirationReturnAddress": {
              "type": "string"
            }
          },
          "required": [
            "expirationReturnAddress"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter for a certain sender",
          "properties": {
            "sender": {
              "type": "string"
            }
          },
          "required": [
            "sender"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter for a certain tag",
          "properties": {
            "tag": {
              "type": "string"
            }
          },
          "required": [
            "tag"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter for a certain issuer",
          "properties": {
            "issuer": {
              "type": "string"
            }
          },
          "required": [
            "issuer"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter outputs based on bech32-encoded state controller address.",
          "properties": {
            "stateController": {
              "type": "string"
            }
          },
          "required": [
            "stateController"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Filter outputs based on bech32-encoded governor (governance controller) address.",
          "properties": {
            "governor": {
              "type": "string"
            }
          },
          "required": [
            "governor"
          ],
          "type": "object"
        },
        {
          "anyOf": [
            {
              "additionalProperties": false,
              "description": "Filters outputs based on the presence of native tokens.",
              "properties": {
                "hasNativeTokens": {
                  "type": "boolean"
                }
              },
              "required": [
                "hasNativeTokens"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Filters outputs that have at least a certain number of distinct native tokens.",
              "properties": {
                "minNativeTokenCount": {
                  "type": "number"
                }
              },
              "required": [
                "minNativeTokenCount"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Filters outputs that have at most a certain number of distinct native tokens.",
              "properties": {
                "maxNativeTokenCount": {
                  "type": "number"
                }
              },
              "required": [
                "maxNativeTokenCount"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Return outputs that were created after a certain Unix timestamp.",
              "properties": {
                "createdAfter": {
                  "type": "number"
                }
              },
              "required": [
                "createdAfter"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Return outputs that were created before a certain Unix timestamp.",
              "properties": {
                "createdBefore": {
                  "type": "number"
                }
              },
              "required": [
                "createdBefore"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Define the page size for the results",
              "properties": {
                "pageSize": {
                  "type": "number"
                }
              },
              "required": [
                "pageSize"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "description": "Pass the cursor(confirmationMS+outputId.pageSize) to start the results from",
              "properties": {
                "cursor": {
                  "type": "string"
                }
              },
              "required": [
                "cursor"
              ],
              "type": "object"
            }
          ],
          "description": "Shared query parameters"
        }
      ],
      "description": "Query parameter for filtering output requests"
    },
    "Question": {
      "additionalProperties": false,
      "properties": {
        "additionalInfo": {
          "type": "string"
        },
        "answers": {
          "items": {
            "$ref": "#/definitions/Answer"
          },
          "type": "array"
        },
        "text": {
          "type": "string"
        }
      },
      "required": [
        "text",
        "answers",
        "additionalInfo"
      ],
      "type": "object"
    },
    "QuestionStatus": {
      "additionalProperties": false,
      "properties": {
        "answers": {
          "items": {
            "$ref": "#/definitions/AnswerStatus"
          },
          "type": "array"
        }
      },
      "required": [
        "answers"
      ],
      "type": "object"
    },
    "ReceiptMilestoneOption": {
      "additionalProperties": false,
      "description": "Receipt milestone option.",
      "properties": {
        "final": {
          "description": "Whether this Receipt is the final one for a given migrated at index.",
          "type": "boolean"
        },
        "funds": {
          "description": "The index data.",
          "items": {
            "$ref": "#/definitions/MigratedFunds"
          },
          "type": "array"
        },
        "migratedAt": {
          "description": "The milestone index at which the funds were migrated in the legacy network.",
          "type": "number"
        },
        "transaction": {
          "additionalProperties": false,
          "description": "The TreasuryTransaction used to fund the funds.",
          "properties": {
            "input": {
              "additionalProperties": false,
              "description": "The input of this transaction.",
              "properties": {
                "milestoneId": {
                  "$ref": "#/definitions/HexEncodedString",
                  "description": "The milestone id of the input."
                }
              },
              "required": [
                "milestoneId"
              ],
              "type": "object"
            },
            "output": {
              "additionalProperties": false,
              "description": "The output of this transaction.",
              "properties": {},
              "type": "object"
            }
          },
          "required": [
            "input",
            "output"
          ],
          "type": "object"
        }
      },
      "required": [
        "migratedAt",
        "final",
        "funds",
        "transaction"
      ],
      "type": "object"
    },
    "ReceiptsResponse": {
      "additionalProperties": false,
      "description": "Receipts response details.",
      "properties": {
        "receipts": {
          "description": "The receipts.",
          "items": {
            "$ref": "#/definitions/MilestoneReceipt"
          },
          "type": "array"
        }
      },
      "required": [
        "receipts"
      ],
      "type": "object"
    },
    "Remainder": {
      "additionalProperties": false,
      "properties": {
        "address": {
          "additionalProperties": false,
          "description": "The remainder address",
          "type": "object"
        },
        "chain": {
          "$ref": "#/definitions/IBip32Chain",
          "description": "The chain derived from seed, for the remainder addresses"
        },
        "output": {
          "additionalProperties": false,
          "description": "The remainder output",
          "type": "object"
        }
      },
      "required": [
        "output",
        "address"
      ],
      "type": "object"
    },
    "RemainderValueStrategy": {
      "anyOf": [
        {
          "$ref": "#/definitions/ChangeAddress"
        },
        {
          "$ref": "#/definitions/ReuseAddress"
        },
        {
          "$ref": "#/definitions/CustomAddress"
        }
      ],
      "description": "The RemainderValueStrategy"
    },
    "RequiredStorageDeposit": {
      "additionalProperties": false,
      "description": "The required storage deposit per output type",
      "properties": {
        "alias": {
          "type": "string"
        },
        "basic": {
          "type": "string"
        },
        "foundry": {
          "type": "string"
        },
        "nft": {
          "type": "string"
        }
      },
      "required": [
        "alias",
        "basic",
        "foundry",
        "nft"
      ],
      "type": "object"
    },
    "ReturnStrategy": {
      "description": "Return strategy for the storage deposit",
      "enum": [
        "Return",
        "Gift"
      ],
      "type": "string"
    },
    "ReuseAddress": {
      "additionalProperties": false,
      "description": "ReuseAddress variant of RemainderValueStrategy",
      "properties": {
        "strategy": {
          "const": "ReuseAddress",
          "type": "string"
        },
        "value": {
          "type": "null"
        }
      },
      "required": [
        "strategy",
        "value"
      ],
      "type": "object"
    },
    "Secp256k1EcdsaSignature": {
      "additionalProperties": false,
      "properties": {
        "publicKey": {
          "$ref": "#/definitions/HexEncodedString",
          "description": "The public key."
        },
        "signature": {
          "$ref": "#/definitions/HexEncodedString",
          "description": "The signature."
        }
      },
      "required": [
        "publicKey",
        "signature"
      ],
      "type": "object"
    },
    "SecretManagerType": {
      "anyOf": [
        {
          "$ref": "#/definitions/LedgerNanoSecretManager"
        },
        {
          "$ref": "#/definitions/MnemonicSecretManager"
        },
        {
          "$ref": "#/definitions/StrongholdSecretManager"
        },
        {
          "$ref": "#/definitions/PlaceholderSecretManager"
        }
      ],
      "description": "Supported secret managers"
    },
    "SeedSecretManager": {
      "additionalProperties": false,
      "description": "Secret manager that uses a seed.",
      "properties": {
        "hexSeed": {
          "type": "string"
        }
      },
      "required": [
        "hexSeed"
      ],
      "type": "object"
    },
    "Segment": {
      "additionalProperties": false,
      "description": "A Segment of the BIP32 path",
      "properties": {
        "bs": {
          "additionalProperties": {
            "type": "number"
          },
          "properties": {
            "BYTES_PER_ELEMENT": {
              "type": "number"
            },
            "buffer": {
              "additionalProperties": false,
              "properties": {
                "byteLength": {
                  "type": "number"
                }
              },
              "required": [
                "byteLength"
              ],
              "type": "object"
            },
            "byteLength": {
              "type": "number"
            },
            "byteOffset": {
              "type": "number"
            },
            "length": {
              "type": "number"
            }
          },
          "required": [
            "BYTES_PER_ELEMENT",
            "buffer",
            "byteLength",
            "byteOffset",
            "length"
          ],
          "type": "object"
        },
        "hardened": {
          "type": "boolean"
        }
      },
      "required": [
        "hardened",
        "bs"
      ],
      "type": "object"
    },
    "SendAmountParams": {
      "additionalProperties": false,
      "description": "Address with a base token amount",
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "expiration": {
          "type": "number"
        },
        "returnAddress": {
          "type": "string"
        }
      },
      "required": [
        "address",
        "amount"
      ],
      "type": "object"
    },
    "SendNativeTokensParams": {
      "additionalProperties": false,
      "description": "Address with native tokens",
      "properties": {
        "address": {
          "type": "string"
        },
        "expiration": {
          "type": "number"
        },
        "returnAddress": {
          "type": "string"
        }
      },
      "required": [
        "address",
        "nativeTokens"
      ],
      "type": "object"
    },
    "SendNftParams": {
      "additionalProperties": false,
      "description": "Address with an NftId",
      "properties": {
        "address": {
          "type": "string"
        },
        "nftId": {
          "type": "string"
        }
      },
      "required": [
        "address",
        "nftId"
      ],
      "type": "object"
    },
    "SignedTransactionEssence": {
      "additionalProperties": false,
      "description": "The signed transaction with inputs data",
      "properties": {
        "inputsData": {
          "$ref": "#/definitions/InputSigningData"
        },
        "transactionPayload": {
          "additionalProperties": false,
          "description": "Transaction payload.",
          "properties": {
            "essence": {
              "additionalProperties": false,
              "description": "The index name.",
              "type": "object"
            },
            "unlocks": {
              "description": "The unlocks.",
              "items": {
                "additionalProperties": false,
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "essence",
            "unlocks"
          ],
          "type": "object"
        }
      },
      "required": [
        "transactionPayload",
        "inputsData"
      ],
      "type": "object"
    },
    "StakingEventPayload": {
      "additionalProperties": false,
      "properties": {
        "additionalInfo": {
          "type": "string"
        },
        "denominator": {
          "type": "string"
        },
        "numerator": {
          "type": "string"
        },
        "requiredMinimumRewards": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "type": {
          "const": 1,
          "type": "number"
        }
      },
      "required": [
        "type",
        "text",
        "symbol",
        "numerator",
        "denominator",
        "requiredMinimumRewards",
        "additionalInfo"
      ],
      "type": "object"
    },
    "StorageDeposit": {
      "additionalProperties": false,
      "description": "Storage deposit strategy to be used for the output",
      "properties": {
        "returnStrategy": {
          "$ref": "#/definitions/ReturnStrategy"
        },
        "useExcessIfLow": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "StrongholdSecretManager": {
      "additionalProperties": false,
      "description": "Secret manager that uses Stronghold.",
      "properties": {
        "stronghold": {
          "additionalProperties": false,
          "properties": {
            "password": {
              "type": "string"
            },
            "snapshotPath": {
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "stronghold"
      ],
      "type": "object"
    },
    "SyncOptions": {
      "additionalProperties": false,
      "description": "Sync options for an account",
      "properties": {
        "account": {
          "$ref": "#/definitions/AccountSyncOptions",
          "description": "Specifies what outputs should be synced for the ed25519 addresses from the account."
        },
        "addressStartIndex": {
          "description": "Address index from which to start syncing addresses. 0 by default, using a higher index will be faster because addresses with a lower index will be skipped, but could result in a wrong balance for that reason",
          "type": "number"
        },
        "addressStartIndexInternal": {
          "description": "Address index from which to start syncing internal addresses. 0 by default, using a higher index will be faster because addresses with a lower index will be skipped, but could result in a wrong balance for that reason",
          "type": "number"
        },
        "addresses": {
          "description": "Specific Bech32 encoded addresses of the account to sync, if addresses are provided, then `address_start_index` will be ignored",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "alias": {
          "$ref": "#/definitions/AliasSyncOptions",
          "description": "Specifies what outputs should be synced for the address of an alias output."
        },
        "forceSyncing": {
          "description": "Usually syncing is skipped if it's called in between 200ms, because there can only be new changes every milestone and calling it twice \"at the same time\" will not return new data When this to true, we will sync anyways, even if it's called 0ms after the las sync finished. Default: false.",
          "type": "boolean"
        },
        "nft": {
          "$ref": "#/definitions/NftSyncOptions",
          "description": "Specifies what outputs should be synced for the address of an nft output."
        },
        "syncIncomingTransactions": {
          "type": "boolean"
        },
        "syncNativeTokenFoundries": {
          "description": "Sync native token foundries, so their metadata can be returned in the balance. Default: false.",
          "type": "boolean"
        },
        "syncOnlyMostBasicOutputs": {
          "description": "Specifies if only basic outputs with an AddressUnlockCondition alone should be synced, will overwrite `account`, `alias` and `nft` options. Default: false.",
          "type": "boolean"
        },
        "syncPendingTransactions": {
          "description": "Checks pending transactions and promotes/reattaches them if necessary. Default: true.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TrackedParticipationOverview": {
      "additionalProperties": false,
      "properties": {
        "amount": {
          "type": "string"
        },
        "answers": {
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "blockId": {
          "type": "string"
        },
        "endMilestoneIndex": {
          "type": "number"
        },
        "startMilestoneIndex": {
          "type": "number"
        }
      },
      "required": [
        "amount",
        "answers",
        "blockId",
        "endMilestoneIndex",
        "startMilestoneIndex"
      ],
      "type": "object"
    },
    "Transaction": {
      "additionalProperties": false,
      "description": "A Transaction with metadata",
      "properties": {
        "blockId": {
          "description": "The block id in which the transaction payload was included",
          "type": "string"
        },
        "inclusionState": {
          "$ref": "#/definitions/InclusionState",
          "description": "The inclusion state of the transaction"
        },
        "incoming": {
          "description": "If the transaction was created by the wallet or someone else",
          "type": "boolean"
        },
        "inputs": {
          "items": {
            "$ref": "#/definitions/OutputResponse"
          },
          "type": "array"
        },
        "networkId": {
          "description": "The network id in which the transaction was sent",
          "type": "string"
        },
        "note": {
          "description": "Note that can be set when sending a transaction and is only stored locally",
          "type": "string"
        },
        "payload": {
          "additionalProperties": false,
          "description": "The transaction payload",
          "properties": {
            "essence": {
              "additionalProperties": false,
              "description": "The index name.",
              "type": "object"
            },
            "unlocks": {
              "description": "The unlocks.",
              "items": {
                "additionalProperties": false,
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "essence",
            "unlocks"
          ],
          "type": "object"
        },
        "timestamp": {
          "description": "The creation time",
          "type": "string"
        },
        "transactionId": {
          "description": "The transaction id",
          "type": "string"
        }
      },
      "required": [
        "payload",
        "inclusionState",
        "timestamp",
        "transactionId",
        "networkId",
        "incoming",
        "inputs"
      ],
      "type": "object"
    },
    "TransactionId": {
      "type": "string"
    },
    "TransactionOptions": {
      "additionalProperties": false,
      "description": "Options for the transaction creation",
      "properties": {
        "allowMicroAmount": {
          "type": "boolean"
        },
        "burn": {
          "$ref": "#/definitions/Burn"
        },
        "customInputs": {
          "description": "Custom inputs that should be used for the transaction",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mandatoryInputs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "note": {
          "description": "Optional note, that is only stored locally",
          "type": "string"
        },
        "remainderValueStrategy": {
          "$ref": "#/definitions/RemainderValueStrategy"
        },
        "taggedDataPayload": {
          "additionalProperties": false,
          "description": "Tagged data payload.",
          "properties": {
            "data": {
              "$ref": "#/definitions/HexEncodedString",
              "description": "The index data."
            },
            "tag": {
              "$ref": "#/definitions/HexEncodedString",
              "description": "The tag to use to categorize the data."
            }
          },
          "required": [
            "tag",
            "data"
          ],
          "type": "object"
        }
      },
      "required": [
        "allowMicroAmount"
      ],
      "type": "object"
    },
    "Unlocks": {
      "additionalProperties": false,
      "description": "Time unlocks to include in the output",
      "properties": {
        "expirationUnixTime": {
          "type": "number"
        },
        "timelockUnixTime": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "VotingEventPayload": {
      "additionalProperties": false,
      "properties": {
        "questions": {
          "items": {
            "$ref": "#/definitions/Question"
          },
          "type": "array"
        },
        "type": {
          "const": 0,
          "type": "number"
        }
      },
      "required": [
        "type",
        "questions"
      ],
      "type": "object"
    },
    "WalletOptions": {
      "additionalProperties": false,
      "description": "Options for the Wallet builder",
      "properties": {
        "clientOptions": {
          "$ref": "#/definitions/IClientOptions"
        },
        "coinType": {
          "$ref": "#/definitions/CoinType"
        },
        "secretManager": {
          "$ref": "#/definitions/SecretManagerType"
        },
        "storagePath": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "__AccountMethod__": {
      "anyOf": [
        {
          "$ref": "#/definitions/__BuildAliasOutputMethod__"
        },
        {
          "$ref": "#/definitions/__BuildBasicOutputMethod__"
        },
        {
          "$ref": "#/definitions/__BuildFoundryOutputMethod__"
        },
        {
          "$ref": "#/definitions/__BuildNftOutputMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareBurnMethod__"
        },
        {
          "$ref": "#/definitions/__ClaimOutputsMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareConsolidateOutputsMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareCreateAliasOutputMethod__"
        },
        {
          "$ref": "#/definitions/__DeregisterParticipationEventMethod__"
        },
        {
          "$ref": "#/definitions/__GenerateEd25519AddressesMethod__"
        },
        {
          "$ref": "#/definitions/__GetBalanceMethod__"
        },
        {
          "$ref": "#/definitions/__GetOutputMethod__"
        },
        {
          "$ref": "#/definitions/__GetIncomingTransactionMethod__"
        },
        {
          "$ref": "#/definitions/__GetFoundryOutputMethod__"
        },
        {
          "$ref": "#/definitions/__ClaimableOutputsMethod__"
        },
        {
          "$ref": "#/definitions/__GetParticipationEventMethod__"
        },
        {
          "$ref": "#/definitions/__GetParticipationEventIdsMethod__"
        },
        {
          "$ref": "#/definitions/__GetParticipationEventsMethod__"
        },
        {
          "$ref": "#/definitions/__GetParticipationEventStatusMethod__"
        },
        {
          "$ref": "#/definitions/__GetTransactionMethod__"
        },
        {
          "$ref": "#/definitions/__AddressesMethod__"
        },
        {
          "$ref": "#/definitions/__AddressesWithUnspentOutputsMethod__"
        },
        {
          "$ref": "#/definitions/__OutputsMethod__"
        },
        {
          "$ref": "#/definitions/__PendingTransactionsMethod__"
        },
        {
          "$ref": "#/definitions/__IncomingTransactionsMethod__"
        },
        {
          "$ref": "#/definitions/__TransactionsMethod__"
        },
        {
          "$ref": "#/definitions/__UnspentOutputsMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareDecreaseNativeTokenSupplyMethod__"
        },
        {
          "$ref": "#/definitions/__MinimumRequiredStorageDepositMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareIncreaseNativeTokenSupplyMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareMintNativeTokenMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareMintNftsMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareOutputMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareSendAmountMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareTransactionMethod__"
        },
        {
          "$ref": "#/definitions/__RegisterParticipationEventsMethod__"
        },
        {
          "$ref": "#/definitions/__RetryTransactionUntilIncludedMethod__"
        },
        {
          "$ref": "#/definitions/__SendAmountMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareSendNativeTokensMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareSendNftMethod__"
        },
        {
          "$ref": "#/definitions/__SendOutputsMethod__"
        },
        {
          "$ref": "#/definitions/__SetAliasMethod__"
        },
        {
          "$ref": "#/definitions/__SetDefaultSyncOptionsMethod__"
        },
        {
          "$ref": "#/definitions/__SignTransactionEssenceMethod__"
        },
        {
          "$ref": "#/definitions/__SignAndSubmitTransactionMethod__"
        },
        {
          "$ref": "#/definitions/__SubmitAndStoreTransactionMethod__"
        },
        {
          "$ref": "#/definitions/__SyncAccountMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareVoteMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareStopParticipatingMethod__"
        },
        {
          "$ref": "#/definitions/__GetParticipationOverviewMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareIncreaseVotingPowerMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareDecreaseVotingPowerMethod__"
        }
      ]
    },
    "__AddressesMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "addresses",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__AddressesWithUnspentOutputsMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "addressesWithUnspentOutputs",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__AliasIdToBech32Method__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "aliasId": {
              "type": "string"
            },
            "bech32Hrp": {
              "type": "string"
            }
          },
          "required": [
            "aliasId"
          ],
          "type": "object"
        },
        "name": {
          "const": "aliasIdToBech32",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__AliasOutputIdMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "aliasId": {
              "type": "string"
            }
          },
          "required": [
            "aliasId"
          ],
          "type": "object"
        },
        "name": {
          "const": "aliasOutputId",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__AliasOutputIdsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "queryParameters": {
              "items": {
                "$ref": "#/definitions/AliasQueryParameter"
              },
              "type": "array"
            }
          },
          "required": [
            "queryParameters"
          ],
          "type": "object"
        },
        "name": {
          "const": "aliasOutputIds",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__BackupMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "destination": {
              "type": "string"
            },
            "password": {
              "type": "string"
            }
          },
          "required": [
            "destination",
            "password"
          ],
          "type": "object"
        },
        "name": {
          "const": "backup",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__Bech32ToHexMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "bech32": {
              "type": "string"
            }
          },
          "required": [
            "bech32"
          ],
          "type": "object"
        },
        "name": {
          "const": "bech32ToHex",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__BlockIdMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "block": {
              "$ref": "#/definitions/Block"
            }
          },
          "required": [
            "block"
          ],
          "type": "object"
        },
        "name": {
          "const": "blockId",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__BuildAliasOutputMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/AliasOutputBuilderParams"
        },
        "name": {
          "const": "buildAliasOutput",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__BuildAndPostBlockMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/IBuildBlockOptions"
            },
            "secretManager": {
              "$ref": "#/definitions/SecretManagerType"
            }
          },
          "type": "object"
        },
        "name": {
          "const": "buildAndPostBlock",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__BuildBasicOutputMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/BasicOutputBuilderParams"
        },
        "name": {
          "const": "buildBasicOutput",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__BuildFoundryOutputMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/FoundryOutputBuilderParams"
        },
        "name": {
          "const": "buildFoundryOutput",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__BuildNftOutputMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/NftOutputBuilderParams"
        },
        "name": {
          "const": "buildNftOutput",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__CallAccountMethodMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "accountId": {
              "$ref": "#/definitions/AccountId"
            },
            "method": {
              "$ref": "#/definitions/__AccountMethod__"
            }
          },
          "required": [
            "accountId",
            "method"
          ],
          "type": "object"
        },
        "name": {
          "const": "callAccountMethod",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__ChangeStrongholdPasswordMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "currentPassword": {
              "type": "string"
            },
            "newPassword": {
              "type": "string"
            }
          },
          "required": [
            "currentPassword",
            "newPassword"
          ],
          "type": "object"
        },
        "name": {
          "const": "changeStrongholdPassword",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__ClaimOutputsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "outputIdsToClaim": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "outputIdsToClaim"
          ],
          "type": "object"
        },
        "name": {
          "const": "claimOutputs",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__ClaimableOutputsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "outputsToClaim": {
              "$ref": "#/definitions/OutputsToClaim"
            }
          },
          "required": [
            "outputsToClaim"
          ],
          "type": "object"
        },
        "name": {
          "const": "claimableOutputs",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__ClearListenersMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "topics": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "topics"
          ],
          "type": "object"
        },
        "name": {
          "const": "clearListeners",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__ClearStrongholdPasswordMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "clearStrongholdPassword",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__ClientMethods__": {
      "anyOf": [
        {
          "$ref": "#/definitions/__GetInfoMethod__"
        },
        {
          "$ref": "#/definitions/__GetOutputMethod__"
        },
        {
          "$ref": "#/definitions/__GetBasicOutputIdsMethod__"
        },
        {
          "$ref": "#/definitions/__GetOutputsMethod__"
        },
        {
          "$ref": "#/definitions/__PostBlockMethod__"
        },
        {
          "$ref": "#/definitions/__BuildAndPostBlockMethod__"
        },
        {
          "$ref": "#/definitions/__GetTipsMethod__"
        },
        {
          "$ref": "#/definitions/__GetNetworkInfoMethod__"
        },
        {
          "$ref": "#/definitions/__GetBlockMethod__"
        },
        {
          "$ref": "#/definitions/__GetBlockMetadataMethod__"
        },
        {
          "$ref": "#/definitions/__FindInputsMethod__"
        },
        {
          "$ref": "#/definitions/__FindOutputsMethod__"
        },
        {
          "$ref": "#/definitions/__PrepareTransactionMethod__"
        },
        {
          "$ref": "#/definitions/__SignTransactionMethod__"
        },
        {
          "$ref": "#/definitions/__SignatureUnlockMethod__"
        },
        {
          "$ref": "#/definitions/__PostBlockPayloadMethod__"
        },
        {
          "$ref": "#/definitions/__GetNodeMethod__"
        },
        {
          "$ref": "#/definitions/__GetNetworkIdMethod__"
        },
        {
          "$ref": "#/definitions/__GetBech32HrpMethod__"
        },
        {
          "$ref": "#/definitions/__GetMinPowScoreMethod__"
        },
        {
          "$ref": "#/definitions/__GetTipsIntervalMethod__"
        },
        {
          "$ref": "#/definitions/__GetProtocolParametersMethod__"
        },
        {
          "$ref": "#/definitions/__GetLocalPowMethod__"
        },
        {
          "$ref": "#/definitions/__GetFallbackToLocalPowMethod__"
        },
        {
          "$ref": "#/definitions/__GetHealthMethod__"
        },
        {
          "$ref": "#/definitions/__GetNodeInfoMethod__"
        },
        {
          "$ref": "#/definitions/__GetPeersMethod__"
        },
        {
          "$ref": "#/definitions/__PostBlockRawMethod__"
        },
        {
          "$ref": "#/definitions/__GetBlockRawMethod__"
        },
        {
          "$ref": "#/definitions/__GetMilestoneByIdMethod__"
        },
        {
          "$ref": "#/definitions/__GetUtxoChangesByIdMethod__"
        },
        {
          "$ref": "#/definitions/__GetMilestoneByIndexMethod__"
        },
        {
          "$ref": "#/definitions/__GetUtxoChangesByIndexMethod__"
        },
        {
          "$ref": "#/definitions/__GetReceiptsMethod__"
        },
        {
          "$ref": "#/definitions/__GetReceiptsMigratedAtMethod__"
        },
        {
          "$ref": "#/definitions/__GetTreasuryMethod__"
        },
        {
          "$ref": "#/definitions/__GetIncludedBlockMethod__"
        },
        {
          "$ref": "#/definitions/__GetIncludedBlockMetadataMethod__"
        },
        {
          "$ref": "#/definitions/__HexToBech32Method__"
        },
        {
          "$ref": "#/definitions/__AliasIdToBech32Method__"
        },
        {
          "$ref": "#/definitions/__NftIdToBech32Method__"
        },
        {
          "$ref": "#/definitions/__HexPublicKeyToBech32AddressMethod__"
        },
        {
          "$ref": "#/definitions/__AliasOutputIdsMethod__"
        },
        {
          "$ref": "#/definitions/__AliasOutputIdMethod__"
        },
        {
          "$ref": "#/definitions/__NftOutputIdsMethod__"
        },
        {
          "$ref": "#/definitions/__NftOutputIdMethod__"
        },
        {
          "$ref": "#/definitions/__FoundryOutputIdsMethod__"
        },
        {
          "$ref": "#/definitions/__FoundryOutputIdMethod__"
        },
        {
          "$ref": "#/definitions/__GetOutputsIgnoreErrorsMethod__"
        },
        {
          "$ref": "#/definitions/__FindBlocksMethod__"
        },
        {
          "$ref": "#/definitions/__RetryMethod__"
        },
        {
          "$ref": "#/definitions/__RetryUntilIncludedMethod__"
        },
        {
          "$ref": "#/definitions/__ConsolidateFundsMethod__"
        },
        {
          "$ref": "#/definitions/__ReattachMethod__"
        },
        {
          "$ref": "#/definitions/__ReattachUncheckedMethod__"
        },
        {
          "$ref": "#/definitions/__PromoteMethod__"
        },
        {
          "$ref": "#/definitions/__PromoteUncheckedMethod__"
        },
        {
          "$ref": "#/definitions/__UnhealthyNodesMethod__"
        },
        {
          "$ref": "#/definitions/__BuildBasicOutputMethod__"
        },
        {
          "$ref": "#/definitions/__BuildAliasOutputMethod__"
        },
        {
          "$ref": "#/definitions/__BuildFoundryOutputMethod__"
        },
        {
          "$ref": "#/definitions/__BuildNftOutputMethod__"
        },
        {
          "$ref": "#/definitions/__ClearListenersMethod__"
        },
        {
          "$ref": "#/definitions/__RequestFundsFromFaucetMethod__"
        }
      ]
    },
    "__ComputeAliasIdMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "outputId": {
              "type": "string"
            }
          },
          "required": [
            "outputId"
          ],
          "type": "object"
        },
        "name": {
          "const": "computeAliasId",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__ComputeFoundryIdMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "aliasAddress": {
              "type": "string"
            },
            "serialNumber": {
              "type": "number"
            },
            "tokenSchemeKind": {
              "type": "number"
            }
          },
          "required": [
            "aliasAddress",
            "serialNumber",
            "tokenSchemeKind"
          ],
          "type": "object"
        },
        "name": {
          "const": "computeFoundryId",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__ComputeNftIdMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "outputId": {
              "type": "string"
            }
          },
          "required": [
            "outputId"
          ],
          "type": "object"
        },
        "name": {
          "const": "computeNftId",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__ConsolidateFundsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "generateAddressesOptions": {
              "$ref": "#/definitions/IGenerateAddressesOptions"
            },
            "secretManager": {
              "$ref": "#/definitions/SecretManagerType"
            }
          },
          "required": [
            "secretManager",
            "generateAddressesOptions"
          ],
          "type": "object"
        },
        "name": {
          "const": "consolidateFunds",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__CreateAccountMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/CreateAccountPayload"
        },
        "name": {
          "const": "createAccount",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__DeregisterParticipationEventMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "eventId": {
              "$ref": "#/definitions/ParticipationEventId"
            }
          },
          "required": [
            "eventId"
          ],
          "type": "object"
        },
        "name": {
          "const": "deregisterParticipationEvent",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__EmitTestEventMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "event": {
              "additionalProperties": false,
              "type": "object"
            }
          },
          "required": [
            "event"
          ],
          "type": "object"
        },
        "name": {
          "const": "emitTestEvent",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__FaucetMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "address": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "required": [
            "url",
            "address"
          ],
          "type": "object"
        },
        "name": {
          "const": "faucet",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__FindBlocksMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "blockIds": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "blockIds"
          ],
          "type": "object"
        },
        "name": {
          "const": "findBlocks",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__FindInputsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "addresses": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "amount": {
              "type": "number"
            }
          },
          "required": [
            "addresses",
            "amount"
          ],
          "type": "object"
        },
        "name": {
          "const": "findInputs",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__FindOutputsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "addresses": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "outputIds": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "outputIds",
            "addresses"
          ],
          "type": "object"
        },
        "name": {
          "const": "findOutputs",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__FoundryOutputIdMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "foundryId": {
              "type": "string"
            }
          },
          "required": [
            "foundryId"
          ],
          "type": "object"
        },
        "name": {
          "const": "foundryOutputId",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__FoundryOutputIdsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "queryParameters": {
              "items": {
                "$ref": "#/definitions/FoundryQueryParameter"
              },
              "type": "array"
            }
          },
          "required": [
            "queryParameters"
          ],
          "type": "object"
        },
        "name": {
          "const": "foundryOutputIds",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GenerateEd25519AddressMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "accountIndex": {
              "type": "number"
            },
            "addressIndex": {
              "type": "number"
            },
            "bech32Hrp": {
              "type": "string"
            },
            "options": {
              "$ref": "#/definitions/GenerateAddressOptions"
            }
          },
          "required": [
            "accountIndex",
            "addressIndex"
          ],
          "type": "object"
        },
        "name": {
          "const": "generateEd25519Address",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GenerateEd25519AddressesMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/IGenerateAddressesOptions"
            }
          },
          "required": [
            "options"
          ],
          "type": "object"
        },
        "name": {
          "const": "generateEd25519Addresses",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GenerateEvmAddressesMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/IGenerateAddressesOptions"
            }
          },
          "required": [
            "options"
          ],
          "type": "object"
        },
        "name": {
          "const": "generateEvmAddresses",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GenerateMnemonicMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "generateMnemonic",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetAccountIndexesMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getAccountIndexes",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetAccountMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "accountId": {
              "$ref": "#/definitions/AccountId"
            }
          },
          "required": [
            "accountId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getAccount",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetAccountsMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getAccounts",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetBalanceMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getBalance",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetBasicOutputIdsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "queryParameters": {
              "items": {
                "$ref": "#/definitions/QueryParameter"
              },
              "type": "array"
            }
          },
          "required": [
            "queryParameters"
          ],
          "type": "object"
        },
        "name": {
          "const": "basicOutputIds",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetBech32HrpMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getBech32Hrp",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetBlockMetadataMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "blockId": {
              "$ref": "#/definitions/BlockId"
            }
          },
          "required": [
            "blockId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getBlockMetadata",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetBlockMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "blockId": {
              "$ref": "#/definitions/BlockId"
            }
          },
          "required": [
            "blockId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getBlock",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetBlockRawMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "blockId": {
              "$ref": "#/definitions/BlockId"
            }
          },
          "required": [
            "blockId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getBlockRaw",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetFallbackToLocalPowMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getFallbackToLocalPow",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetFoundryOutputMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "tokenId": {
              "type": "string"
            }
          },
          "required": [
            "tokenId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getFoundryOutput",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetHealthMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "url": {
              "type": "string"
            }
          },
          "required": [
            "url"
          ],
          "type": "object"
        },
        "name": {
          "const": "getHealth",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetIncludedBlockMetadataMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "transactionId": {
              "type": "string"
            }
          },
          "required": [
            "transactionId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getIncludedBlockMetadata",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetIncludedBlockMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "transactionId": {
              "type": "string"
            }
          },
          "required": [
            "transactionId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getIncludedBlock",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetIncomingTransactionMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "transactionId": {
              "type": "string"
            }
          },
          "required": [
            "transactionId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getIncomingTransaction",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetInfoMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getInfo",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetLedgerNanoStatusMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getLedgerNanoStatus",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetLocalPowMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getLocalPow",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetMilestoneByIdMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "milestoneId": {
              "type": "string"
            }
          },
          "required": [
            "milestoneId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getMilestoneById",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetMilestoneByIndexMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "index": {
              "type": "number"
            }
          },
          "required": [
            "index"
          ],
          "type": "object"
        },
        "name": {
          "const": "getMilestoneByIndex",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetMinPowScoreMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getMinPowScore",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetNetworkIdMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getNetworkId",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetNetworkInfoMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getNetworkInfo",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetNodeInfoMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "auth": {
              "$ref": "#/definitions/IAuth"
            },
            "url": {
              "type": "string"
            }
          },
          "required": [
            "url"
          ],
          "type": "object"
        },
        "name": {
          "const": "getNodeInfo",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetNodeMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getNode",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetOutputMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "outputId": {
              "type": "string"
            }
          },
          "required": [
            "outputId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getOutput",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetOutputsIgnoreErrorsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "outputIds": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "outputIds"
          ],
          "type": "object"
        },
        "name": {
          "const": "getOutputsIgnoreErrors",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetOutputsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "outputIds": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "outputIds"
          ],
          "type": "object"
        },
        "name": {
          "const": "getOutputs",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetParticipationEventIdsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "eventType": {
              "$ref": "#/definitions/ParticipationEventType"
            },
            "node": {
              "$ref": "#/definitions/INode"
            }
          },
          "required": [
            "node"
          ],
          "type": "object"
        },
        "name": {
          "const": "getParticipationEventIds",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetParticipationEventMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "eventId": {
              "$ref": "#/definitions/ParticipationEventId"
            }
          },
          "required": [
            "eventId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getParticipationEvent",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetParticipationEventStatusMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "eventId": {
              "$ref": "#/definitions/ParticipationEventId"
            }
          },
          "required": [
            "eventId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getParticipationEventStatus",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetParticipationEventsMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getParticipationEvents",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetParticipationOverviewMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "eventIds": {
              "items": {
                "$ref": "#/definitions/ParticipationEventId"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "name": {
          "const": "getParticipationOverview",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetPeersMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getPeers",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetProtocolParametersMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getProtocolParameters",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetReceiptsMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getReceipts",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetReceiptsMigratedAtMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "milestoneIndex": {
              "type": "number"
            }
          },
          "required": [
            "milestoneIndex"
          ],
          "type": "object"
        },
        "name": {
          "const": "getReceiptsMigratedAt",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetTipsIntervalMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getTipsInterval",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetTipsMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getTips",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetTransactionMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "transactionId": {
              "type": "string"
            }
          },
          "required": [
            "transactionId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getTransaction",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetTreasuryMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "getTreasury",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__GetUtxoChangesByIdMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "milestoneId": {
              "type": "string"
            }
          },
          "required": [
            "milestoneId"
          ],
          "type": "object"
        },
        "name": {
          "const": "getUtxoChangesById",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__GetUtxoChangesByIndexMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "index": {
              "type": "number"
            }
          },
          "required": [
            "index"
          ],
          "type": "object"
        },
        "name": {
          "const": "getUtxoChangesByIndex",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__HashTransactionEssenceMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "essence": {
              "additionalProperties": false,
              "type": "object"
            }
          },
          "required": [
            "essence"
          ],
          "type": "object"
        },
        "name": {
          "const": "hashTransactionEssence",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__HexPublicKeyToBech32AddressMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "bech32Hrp": {
              "type": "string"
            },
            "hex": {
              "type": "string"
            }
          },
          "required": [
            "hex"
          ],
          "type": "object"
        },
        "name": {
          "const": "hexPublicKeyToBech32Address",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__HexToBech32Method__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "bech32Hrp": {
              "type": "string"
            },
            "hex": {
              "type": "string"
            }
          },
          "required": [
            "hex"
          ],
          "type": "object"
        },
        "name": {
          "const": "hexToBech32",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__IncomingTransactionsMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "incomingTransactions",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__IsAddressValidMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        },
        "name": {
          "const": "isAddressValid",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__IsStrongholdPasswordAvailableMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "isStrongholdPasswordAvailable",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__Method__": {
      "anyOf": [
        {
          "$ref": "#/definitions/__BackupMethod__"
        },
        {
          "$ref": "#/definitions/__CallAccountMethodMethod__"
        },
        {
          "$ref": "#/definitions/__ChangeStrongholdPasswordMethod__"
        },
        {
          "$ref": "#/definitions/__ClearListenersMethod__"
        },
        {
          "$ref": "#/definitions/__ClearStrongholdPasswordMethod__"
        },
        {
          "$ref": "#/definitions/__CreateAccountMethod__"
        },
        {
          "$ref": "#/definitions/__EmitTestEventMethod__"
        },
        {
          "$ref": "#/definitions/__GenerateMnemonicMethod__"
        },
        {
          "$ref": "#/definitions/__GetAccountMethod__"
        },
        {
          "$ref": "#/definitions/__GetAccountIndexesMethod__"
        },
        {
          "$ref": "#/definitions/__GetAccountsMethod__"
        },
        {
          "$ref": "#/definitions/__GetLedgerNanoStatusMethod__"
        },
        {
          "$ref": "#/definitions/__GenerateEd25519AddressMethod__"
        },
        {
          "$ref": "#/definitions/__IsStrongholdPasswordAvailableMethod__"
        },
        {
          "$ref": "#/definitions/__RecoverAccountsMethod__"
        },
        {
          "$ref": "#/definitions/__RemoveLatestAccountMethod__"
        },
        {
          "$ref": "#/definitions/__RestoreBackupMethod__"
        },
        {
          "$ref": "#/definitions/__SetClientOptionsMethod__"
        },
        {
          "$ref": "#/definitions/__SetStrongholdPasswordClearIntervalMethod__"
        },
        {
          "$ref": "#/definitions/__SetStrongholdPasswordMethod__"
        },
        {
          "$ref": "#/definitions/__StartBackgroundSyncMethod__"
        },
        {
          "$ref": "#/definitions/__StopBackgroundSyncMethod__"
        },
        {
          "$ref": "#/definitions/__StoreMnemonicMethod__"
        },
        {
          "$ref": "#/definitions/__UpdateNodeAuthMethod__"
        }
      ]
    },
    "__MilestoneIdMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "payload": {
              "additionalProperties": false,
              "properties": {
                "appliedMerkleRoot": {
                  "$ref": "#/definitions/HexEncodedString",
                  "description": "The Merkle tree hash of all blocks applied by this milestone."
                },
                "inclusionMerkleRoot": {
                  "$ref": "#/definitions/HexEncodedString",
                  "description": "The Merkle tree hash of all blocks confirmed by this milestone."
                },
                "index": {
                  "description": "The index name.",
                  "type": "number"
                },
                "metadata": {
                  "$ref": "#/definitions/HexEncodedString",
                  "description": "The metadata."
                },
                "options": {
                  "description": "The milestone options.",
                  "items": {
                    "additionalProperties": false,
                    "type": "object"
                  },
                  "type": "array"
                },
                "parents": {
                  "description": "The parents where this milestone attaches to.",
                  "items": {
                    "$ref": "#/definitions/HexEncodedString"
                  },
                  "type": "array"
                },
                "previousMilestoneId": {
                  "$ref": "#/definitions/HexEncodedString",
                  "description": "The id of the previous milestone."
                },
                "protocolVersion": {
                  "description": "The protocol version.",
                  "type": "number"
                },
                "signatures": {
                  "description": "The signatures.",
                  "items": {
                    "additionalProperties": false,
                    "description": "Ed25519Signature signature.",
                    "properties": {
                      "publicKey": {
                        "$ref": "#/definitions/HexEncodedString",
                        "description": "The public key."
                      },
                      "signature": {
                        "$ref": "#/definitions/HexEncodedString",
                        "description": "The signature."
                      }
                    },
                    "required": [
                      "publicKey",
                      "signature"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "timestamp": {
                  "description": "The timestamp of the milestone.",
                  "type": "number"
                }
              },
              "required": [
                "index",
                "timestamp",
                "protocolVersion",
                "previousMilestoneId",
                "parents",
                "inclusionMerkleRoot",
                "appliedMerkleRoot",
                "signatures"
              ],
              "type": "object"
            }
          },
          "required": [
            "payload"
          ],
          "type": "object"
        },
        "name": {
          "const": "milestoneId",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__MinimumRequiredStorageDepositMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "output": {
              "additionalProperties": false,
              "type": "object"
            }
          },
          "required": [
            "output"
          ],
          "type": "object"
        },
        "name": {
          "const": "minimumRequiredStorageDeposit",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__MnemonicToHexSeedMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "mnemonic": {
              "type": "string"
            }
          },
          "required": [
            "mnemonic"
          ],
          "type": "object"
        },
        "name": {
          "const": "mnemonicToHexSeed",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__NftIdToBech32Method__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "bech32Hrp": {
              "type": "string"
            },
            "nftId": {
              "type": "string"
            }
          },
          "required": [
            "nftId"
          ],
          "type": "object"
        },
        "name": {
          "const": "nftIdToBech32",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__NftOutputIdMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "nftId": {
              "type": "string"
            }
          },
          "required": [
            "nftId"
          ],
          "type": "object"
        },
        "name": {
          "const": "nftOutputId",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__NftOutputIdsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "queryParameters": {
              "items": {
                "$ref": "#/definitions/NftQueryParameter"
              },
              "type": "array"
            }
          },
          "required": [
            "queryParameters"
          ],
          "type": "object"
        },
        "name": {
          "const": "nftOutputIds",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__OutputsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "filterOptions": {
              "$ref": "#/definitions/FilterOptions"
            }
          },
          "type": "object"
        },
        "name": {
          "const": "outputs",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__ParseBech32AddressMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "required": [
            "address"
          ],
          "type": "object"
        },
        "name": {
          "const": "parseBech32Address",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PendingTransactionsMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "pendingTransactions",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__PostBlockMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "block": {
              "$ref": "#/definitions/Block"
            }
          },
          "required": [
            "block"
          ],
          "type": "object"
        },
        "name": {
          "const": "postBlock",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PostBlockPayloadMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "payload": {
              "additionalProperties": false,
              "type": "object"
            }
          },
          "required": [
            "payload"
          ],
          "type": "object"
        },
        "name": {
          "const": "postBlockPayload",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PostBlockRawMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "block": {
              "$ref": "#/definitions/Block"
            }
          },
          "required": [
            "block"
          ],
          "type": "object"
        },
        "name": {
          "const": "postBlockRaw",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareBurnMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "burn": {
              "$ref": "#/definitions/Burn"
            },
            "options": {
              "$ref": "#/definitions/TransactionOptions"
            }
          },
          "required": [
            "burn"
          ],
          "type": "object"
        },
        "name": {
          "const": "prepareBurn",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareConsolidateOutputsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "force": {
              "type": "boolean"
            },
            "outputConsolidationThreshold": {
              "type": "number"
            }
          },
          "required": [
            "force"
          ],
          "type": "object"
        },
        "name": {
          "const": "prepareConsolidateOutputs",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareCreateAliasOutputMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/TransactionOptions"
            },
            "params": {
              "$ref": "#/definitions/AliasOutputParams"
            }
          },
          "type": "object"
        },
        "name": {
          "const": "prepareCreateAliasOutput",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareDecreaseNativeTokenSupplyMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "meltAmount": {
              "$ref": "#/definitions/HexEncodedAmount"
            },
            "options": {
              "$ref": "#/definitions/TransactionOptions"
            },
            "tokenId": {
              "type": "string"
            }
          },
          "required": [
            "tokenId",
            "meltAmount"
          ],
          "type": "object"
        },
        "name": {
          "const": "prepareDecreaseNativeTokenSupply",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareDecreaseVotingPowerMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "amount": {
              "type": "string"
            }
          },
          "required": [
            "amount"
          ],
          "type": "object"
        },
        "name": {
          "const": "prepareDecreaseVotingPower",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareIncreaseNativeTokenSupplyMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "mintAmount": {
              "$ref": "#/definitions/HexEncodedAmount"
            },
            "options": {
              "$ref": "#/definitions/TransactionOptions"
            },
            "tokenId": {
              "type": "string"
            }
          },
          "required": [
            "tokenId",
            "mintAmount"
          ],
          "type": "object"
        },
        "name": {
          "const": "prepareIncreaseNativeTokenSupply",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareIncreaseVotingPowerMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "amount": {
              "type": "string"
            }
          },
          "required": [
            "amount"
          ],
          "type": "object"
        },
        "name": {
          "const": "prepareIncreaseVotingPower",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareMintNativeTokenMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/TransactionOptions"
            },
            "params": {
              "$ref": "#/definitions/MintNativeTokenParams"
            }
          },
          "required": [
            "params"
          ],
          "type": "object"
        },
        "name": {
          "const": "prepareMintNativeToken",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareMintNftsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/TransactionOptions"
            },
            "params": {
              "items": {
                "$ref": "#/definitions/MintNftParams"
              },
              "type": "array"
            }
          },
          "required": [
            "params"
          ],
          "type": "object"
        },
        "name": {
          "const": "prepareMintNfts",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareOutputMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "params": {
              "$ref": "#/definitions/OutputParams"
            },
            "transactionOptions": {
              "$ref": "#/definitions/TransactionOptions"
            }
          },
          "required": [
            "params"
          ],
          "type": "object"
        },
        "name": {
          "const": "prepareOutput",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareSendAmountMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/TransactionOptions"
            },
            "params": {
              "items": {
                "$ref": "#/definitions/SendAmountParams"
              },
              "type": "array"
            }
          },
          "required": [
            "params"
          ],
          "type": "object"
        },
        "name": {
          "const": "prepareSendAmount",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareSendNativeTokensMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/TransactionOptions"
            },
            "params": {
              "items": {
                "$ref": "#/definitions/SendNativeTokensParams"
              },
              "type": "array"
            }
          },
          "required": [
            "params"
          ],
          "type": "object"
        },
        "name": {
          "const": "prepareSendNativeTokens",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareSendNftMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/TransactionOptions"
            },
            "params": {
              "items": {
                "$ref": "#/definitions/SendNftParams"
              },
              "type": "array"
            }
          },
          "required": [
            "params"
          ],
          "type": "object"
        },
        "name": {
          "const": "prepareSendNft",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareStopParticipatingMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "eventId": {
              "$ref": "#/definitions/ParticipationEventId"
            }
          },
          "required": [
            "eventId"
          ],
          "type": "object"
        },
        "name": {
          "const": "prepareStopParticipating",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareTransactionMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/IBuildBlockOptions"
            },
            "secretManager": {
              "$ref": "#/definitions/SecretManagerType"
            }
          },
          "type": "object"
        },
        "name": {
          "const": "prepareTransaction",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PrepareVoteMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "answers": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "eventId": {
              "$ref": "#/definitions/ParticipationEventId"
            }
          },
          "type": "object"
        },
        "name": {
          "const": "prepareVote",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PromoteMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "blockId": {
              "$ref": "#/definitions/BlockId"
            }
          },
          "required": [
            "blockId"
          ],
          "type": "object"
        },
        "name": {
          "const": "promote",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__PromoteUncheckedMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "blockId": {
              "$ref": "#/definitions/BlockId"
            }
          },
          "required": [
            "blockId"
          ],
          "type": "object"
        },
        "name": {
          "const": "promoteUnchecked",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__ReattachMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "blockId": {
              "$ref": "#/definitions/BlockId"
            }
          },
          "required": [
            "blockId"
          ],
          "type": "object"
        },
        "name": {
          "const": "reattach",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__ReattachUncheckedMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "blockId": {
              "$ref": "#/definitions/BlockId"
            }
          },
          "required": [
            "blockId"
          ],
          "type": "object"
        },
        "name": {
          "const": "reattachUnchecked",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__RecoverAccountsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "accountGapLimit": {
              "type": "number"
            },
            "accountStartIndex": {
              "type": "number"
            },
            "addressGapLimit": {
              "type": "number"
            },
            "syncOptions": {
              "$ref": "#/definitions/SyncOptions"
            }
          },
          "required": [
            "accountStartIndex",
            "accountGapLimit",
            "addressGapLimit"
          ],
          "type": "object"
        },
        "name": {
          "const": "recoverAccounts",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__RegisterParticipationEventsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/ParticipationEventRegistrationOptions"
            }
          },
          "required": [
            "options"
          ],
          "type": "object"
        },
        "name": {
          "const": "registerParticipationEvents",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__RemoveLatestAccountMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "removeLatestAccount",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__RequestFundsFromFaucetMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "address": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "required": [
            "url",
            "address"
          ],
          "type": "object"
        },
        "name": {
          "const": "requestFundsFromFaucet",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__RestoreBackupMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "ignoreIfBech32Mismatch": {
              "type": "string"
            },
            "ignoreIfCoinTypeMismatch": {
              "type": "boolean"
            },
            "password": {
              "type": "string"
            },
            "source": {
              "type": "string"
            }
          },
          "required": [
            "source",
            "password"
          ],
          "type": "object"
        },
        "name": {
          "const": "restoreBackup",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__RetryMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "blockId": {
              "type": "string"
            }
          },
          "required": [
            "blockId"
          ],
          "type": "object"
        },
        "name": {
          "const": "retry",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__RetryTransactionUntilIncludedMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "interval": {
              "type": "number"
            },
            "maxAttempts": {
              "type": "number"
            },
            "transactionId": {
              "type": "string"
            }
          },
          "required": [
            "transactionId"
          ],
          "type": "object"
        },
        "name": {
          "const": "retryTransactionUntilIncluded",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__RetryUntilIncludedMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "blockId": {
              "type": "string"
            },
            "interval": {
              "type": "number"
            },
            "maxAttempts": {
              "type": "number"
            }
          },
          "required": [
            "blockId"
          ],
          "type": "object"
        },
        "name": {
          "const": "retryUntilIncluded",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SecretManagerMethods__": {
      "anyOf": [
        {
          "$ref": "#/definitions/__GenerateEd25519AddressesMethod__"
        },
        {
          "$ref": "#/definitions/__GenerateEvmAddressesMethod__"
        },
        {
          "$ref": "#/definitions/__GetLedgerNanoStatusMethod__"
        },
        {
          "$ref": "#/definitions/__SignTransactionMethod__"
        },
        {
          "$ref": "#/definitions/__SignatureUnlockMethod__"
        },
        {
          "$ref": "#/definitions/__StoreMnemonicMethod__"
        },
        {
          "$ref": "#/definitions/__SignEd25519Method__"
        },
        {
          "$ref": "#/definitions/__SignSecp256k1EcdsaMethod__"
        }
      ]
    },
    "__SendAmountMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/TransactionOptions"
            },
            "params": {
              "items": {
                "$ref": "#/definitions/SendAmountParams"
              },
              "type": "array"
            }
          },
          "required": [
            "params"
          ],
          "type": "object"
        },
        "name": {
          "const": "sendAmount",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SendOutputsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/TransactionOptions"
            },
            "outputs": {
              "items": {
                "additionalProperties": false,
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "outputs"
          ],
          "type": "object"
        },
        "name": {
          "const": "sendOutputs",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SetAliasMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "alias": {
              "type": "string"
            }
          },
          "required": [
            "alias"
          ],
          "type": "object"
        },
        "name": {
          "const": "setAlias",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SetClientOptionsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "clientOptions": {
              "$ref": "#/definitions/IClientOptions"
            }
          },
          "required": [
            "clientOptions"
          ],
          "type": "object"
        },
        "name": {
          "const": "setClientOptions",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SetDefaultSyncOptionsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/SyncOptions"
            }
          },
          "required": [
            "options"
          ],
          "type": "object"
        },
        "name": {
          "const": "setDefaultSyncOptions",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SetStrongholdPasswordClearIntervalMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "intervalInMilliseconds": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "name": {
          "const": "setStrongholdPasswordClearInterval",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__SetStrongholdPasswordMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "password": {
              "type": "string"
            }
          },
          "required": [
            "password"
          ],
          "type": "object"
        },
        "name": {
          "const": "setStrongholdPassword",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SignAndSubmitTransactionMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "preparedTransactionData": {
              "$ref": "#/definitions/PreparedTransactionData"
            }
          },
          "required": [
            "preparedTransactionData"
          ],
          "type": "object"
        },
        "name": {
          "const": "signAndSubmitTransaction",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SignEd25519Method__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "chain": {
              "$ref": "#/definitions/IBip32Chain"
            },
            "message": {
              "$ref": "#/definitions/HexEncodedString"
            }
          },
          "required": [
            "message",
            "chain"
          ],
          "type": "object"
        },
        "name": {
          "const": "signEd25519",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SignSecp256k1EcdsaMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "chain": {
              "$ref": "#/definitions/IBip32Chain"
            },
            "message": {
              "$ref": "#/definitions/HexEncodedString"
            }
          },
          "required": [
            "message",
            "chain"
          ],
          "type": "object"
        },
        "name": {
          "const": "signSecp256k1Ecdsa",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SignTransactionEssenceMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "preparedTransactionData": {
              "$ref": "#/definitions/PreparedTransactionData"
            }
          },
          "required": [
            "preparedTransactionData"
          ],
          "type": "object"
        },
        "name": {
          "const": "signTransactionEssence",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SignTransactionMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "preparedTransactionData": {
              "$ref": "#/definitions/PreparedTransactionData"
            },
            "secretManager": {
              "$ref": "#/definitions/SecretManagerType"
            }
          },
          "required": [
            "secretManager",
            "preparedTransactionData"
          ],
          "type": "object"
        },
        "name": {
          "const": "signTransaction",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SignatureUnlockMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "chain": {
              "$ref": "#/definitions/IBip32Chain"
            },
            "secretManager": {
              "$ref": "#/definitions/SecretManagerType"
            },
            "transactionEssenceHash": {
              "$ref": "#/definitions/HexEncodedString"
            }
          },
          "required": [
            "secretManager",
            "transactionEssenceHash",
            "chain"
          ],
          "type": "object"
        },
        "name": {
          "const": "signatureUnlock",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__StartBackgroundSyncMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "intervalInMilliseconds": {
              "type": "number"
            },
            "options": {
              "$ref": "#/definitions/SyncOptions"
            }
          },
          "type": "object"
        },
        "name": {
          "const": "startBackgroundSync",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__StopBackgroundSyncMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "stopBackgroundSync",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__StoreMnemonicMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "mnemonic": {
              "type": "string"
            }
          },
          "required": [
            "mnemonic"
          ],
          "type": "object"
        },
        "name": {
          "const": "storeMnemonic",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SubmitAndStoreTransactionMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "signedTransactionData": {
              "$ref": "#/definitions/SignedTransactionEssence"
            }
          },
          "required": [
            "signedTransactionData"
          ],
          "type": "object"
        },
        "name": {
          "const": "submitAndStoreTransaction",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__SyncAccountMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "options": {
              "$ref": "#/definitions/SyncOptions"
            }
          },
          "type": "object"
        },
        "name": {
          "const": "sync",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__TransactionIdMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "payload": {
              "additionalProperties": false,
              "description": "Transaction payload.",
              "properties": {
                "essence": {
                  "additionalProperties": false,
                  "description": "The index name.",
                  "type": "object"
                },
                "unlocks": {
                  "description": "The unlocks.",
                  "items": {
                    "additionalProperties": false,
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "essence",
                "unlocks"
              ],
              "type": "object"
            }
          },
          "required": [
            "payload"
          ],
          "type": "object"
        },
        "name": {
          "const": "transactionId",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__TransactionsMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "transactions",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__UnhealthyNodesMethod__": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "unhealthyNodes",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "__UnspentOutputsMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "filterOptions": {
              "$ref": "#/definitions/FilterOptions"
            }
          },
          "type": "object"
        },
        "name": {
          "const": "unspentOutputs",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__UpdateNodeAuthMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "auth": {
              "$ref": "#/definitions/IAuth"
            },
            "url": {
              "type": "string"
            }
          },
          "required": [
            "url"
          ],
          "type": "object"
        },
        "name": {
          "const": "updateNodeAuth",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__UtilsMethods__": {
      "anyOf": [
        {
          "$ref": "#/definitions/__GenerateMnemonicMethod__"
        },
        {
          "$ref": "#/definitions/__MnemonicToHexSeedMethod__"
        },
        {
          "$ref": "#/definitions/__ComputeAliasIdMethod__"
        },
        {
          "$ref": "#/definitions/__ComputeNftIdMethod__"
        },
        {
          "$ref": "#/definitions/__ComputeFoundryIdMethod__"
        },
        {
          "$ref": "#/definitions/__ParseBech32AddressMethod__"
        },
        {
          "$ref": "#/definitions/__BlockIdMethod__"
        },
        {
          "$ref": "#/definitions/__MilestoneIdMethod__"
        },
        {
          "$ref": "#/definitions/__TransactionIdMethod__"
        },
        {
          "$ref": "#/definitions/__Bech32ToHexMethod__"
        },
        {
          "$ref": "#/definitions/__HexToBech32Method__"
        },
        {
          "$ref": "#/definitions/__AliasIdToBech32Method__"
        },
        {
          "$ref": "#/definitions/__NftIdToBech32Method__"
        },
        {
          "$ref": "#/definitions/__HexPublicKeyToBech32AddressMethod__"
        },
        {
          "$ref": "#/definitions/__IsAddressValidMethod__"
        },
        {
          "$ref": "#/definitions/__HashTransactionEssenceMethod__"
        },
        {
          "$ref": "#/definitions/__VerifyEd25519SignatureMethod__"
        },
        {
          "$ref": "#/definitions/__VerifySecp256k1EcdsaSignatureMethod__"
        },
        {
          "$ref": "#/definitions/__VerifyMnemonicMethod__"
        },
        {
          "$ref": "#/definitions/__FaucetMethod__"
        }
      ]
    },
    "__VerifyEd25519SignatureMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "message": {
              "$ref": "#/definitions/HexEncodedString"
            },
            "signature": {
              "additionalProperties": false,
              "description": "Ed25519Signature signature.",
              "properties": {
                "publicKey": {
                  "$ref": "#/definitions/HexEncodedString",
                  "description": "The public key."
                },
                "signature": {
                  "$ref": "#/definitions/HexEncodedString",
                  "description": "The signature."
                }
              },
              "required": [
                "publicKey",
                "signature"
              ],
              "type": "object"
            }
          },
          "required": [
            "signature",
            "message"
          ],
          "type": "object"
        },
        "name": {
          "const": "verifyEd25519Signature",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__VerifyMnemonicMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "mnemonic": {
              "type": "string"
            }
          },
          "required": [
            "mnemonic"
          ],
          "type": "object"
        },
        "name": {
          "const": "verifyMnemonic",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    },
    "__VerifySecp256k1EcdsaSignatureMethod__": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "message": {
              "$ref": "#/definitions/HexEncodedString"
            },
            "publicKey": {
              "$ref": "#/definitions/HexEncodedString"
            },
            "signature": {
              "$ref": "#/definitions/HexEncodedString"
            }
          },
          "required": [
            "publicKey",
            "signature",
            "message"
          ],
          "type": "object"
        },
        "name": {
          "const": "verifySecp256k1EcdsaSignature",
          "type": "string"
        }
      },
      "required": [
        "name",
        "data"
      ],
      "type": "object"
    }
  }
}